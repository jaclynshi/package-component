{"code":"import React, { useMemo, createRef, useEffect, useState, useCallback, memo, useContext, } from 'react';\r\nimport { DownOutlined, LoadingOutlined, CloseOutlined } from '@ant-design/icons';\r\nimport { ctx } from '../Form';\r\nimport { globalCtx } from '../GlobalConfig';\r\nimport './index.module.less';\r\nconst Select = (props) => {\r\n    const { option, width, placeholder, disabled, loading, showSearch, clearable, handleSelectCallback, handleTextChange, } = props;\r\n    const [selected, setSelected] = useState('');\r\n    const [selectedValue, setSelectedValue] = useState('');\r\n    const optionRef = createRef();\r\n    const formCtx = useContext(ctx);\r\n    const { globalColor } = useContext(globalCtx);\r\n    const closeSelect = () => {\r\n        if (optionRef.current && optionRef.current.style) {\r\n            optionRef.current.style.height = '0px';\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        optionRef.current.height = `0px`;\r\n        window.addEventListener('click', closeSelect);\r\n        return () => {\r\n            window.removeEventListener('click', closeSelect);\r\n        };\r\n    }, []);\r\n    useEffect(() => {\r\n        //用于监听Form组件的重置任务\r\n        if (formCtx.reset) {\r\n            setSelected('');\r\n        }\r\n    }, [formCtx.reset]);\r\n    useEffect(() => {\r\n        if (formCtx.submitStatus) {\r\n            formCtx.getChildVal(selected);\r\n        }\r\n    }, [formCtx.submitStatus]);\r\n    const ownsWidth = useMemo(() => {\r\n        //传参宽度\r\n        if (width) {\r\n            return {\r\n                width: `${width}px`,\r\n            };\r\n        }\r\n        return {};\r\n    }, [width]);\r\n    const disabledStyle = useMemo(() => {\r\n        //禁用状态\r\n        if (disabled) {\r\n            return {\r\n                cursor: 'not-allowed',\r\n                background: '#F2F3F5',\r\n            };\r\n        }\r\n    }, [disabled]);\r\n    const toggleOptions = (e) => {\r\n        //切换下拉\r\n        e.stopPropagation();\r\n        if (disabled)\r\n            return;\r\n        if (optionRef.current.style.height === '0px' || optionRef.current.style.height === '') {\r\n            if (showSearch) {\r\n                optionRef.current.style.height = `${inputFilterOtpions.length * 100}%`;\r\n            }\r\n            else {\r\n                optionRef.current.style.height = `${option.length * 100}%`;\r\n            }\r\n        }\r\n        else {\r\n            optionRef.current.style.height = '0px';\r\n        }\r\n    };\r\n    const changeOptions = (v, e) => {\r\n        //选择选项\r\n        e.stopPropagation();\r\n        if (v.disabled)\r\n            return;\r\n        optionRef.current.style.height = '0px';\r\n        setSelected(v.label);\r\n        setSelectedValue(v.value);\r\n        if (handleSelectCallback) {\r\n            handleSelectCallback(v);\r\n        }\r\n    };\r\n    const inputFilterOtpions = useMemo(() => {\r\n        //输入状态options过滤\r\n        return option === null || option === void 0 ? void 0 : option.filter((item) => {\r\n            return item.label.includes(selected);\r\n        });\r\n    }, [option, selected]);\r\n    const handleInputChange = useCallback((e) => {\r\n        //输入后的回调\r\n        setSelected(e.target.value);\r\n        optionRef.current.style.height =\r\n            option.filter((item) => {\r\n                return item.label.includes(e.target.value);\r\n            }).length *\r\n                100 +\r\n                '%';\r\n        if (handleTextChange) {\r\n            handleTextChange(e.target.value);\r\n        }\r\n    }, [selected]);\r\n    const selectClassName = useMemo(() => {\r\n        return selected ? 'size' : 'placeholder';\r\n    }, [selected]);\r\n    return showSearch ? (React.createElement(React.Fragment, null,\r\n        React.createElement(\"div\", { className: \"select\", style: Object.assign(Object.assign({}, ownsWidth), { '--global-color': disabled ? '#ccc' : globalColor || '#1890ff' }) },\r\n            React.createElement(\"div\", { className: \"selected\", style: disabledStyle },\r\n                React.createElement(\"input\", { type: \"text\", className: \"selected\", value: selected, placeholder: placeholder, onClick: toggleOptions, onChange: (e) => handleInputChange(e) }),\r\n                clearable ? (React.createElement(CloseOutlined, { onClick: () => setSelected('') })) : (React.createElement(DownOutlined, { onClick: toggleOptions }))),\r\n            React.createElement(\"div\", { className: \"selectOptions\", style: ownsWidth, ref: optionRef }, inputFilterOtpions.map((s) => {\r\n                return (React.createElement(\"div\", { key: s.label, className: \"option\", style: s.disabled\r\n                        ? {\r\n                            cursor: 'not-allowed',\r\n                            background: '#F2F3F5',\r\n                            '--line-disabled': '#000000',\r\n                        }\r\n                        : { '--line-disabled': globalColor || '#1890ff' }, onClick: (e) => changeOptions(s, e) }, s.label));\r\n            }))))) : (React.createElement(\"div\", { className: \"select\", style: Object.assign(Object.assign(Object.assign({}, ownsWidth), disabledStyle), { '--global-color': disabled ? '#ccc' : globalColor || '#1890ff' }) },\r\n        React.createElement(\"div\", { className: \"selected\", onClick: toggleOptions, style: disabledStyle },\r\n            React.createElement(\"div\", { className: selectClassName }, selected || placeholder),\r\n            loading ? React.createElement(LoadingOutlined, null) : React.createElement(DownOutlined, null)),\r\n        React.createElement(\"div\", { className: \"selectOptions\", style: ownsWidth, ref: optionRef }, option === null || option === void 0 ? void 0 : option.map((s) => {\r\n            return (React.createElement(\"div\", { key: s.label, className: s.value == selectedValue ? 'select-option' : 'option', style: s.disabled\r\n                    ? {\r\n                        cursor: 'not-allowed',\r\n                        background: '#F2F3F5',\r\n                        '--line-disabled': '#000000',\r\n                    }\r\n                    : { '--line-disabled': globalColor || '#1890ff' }, onClick: (e) => changeOptions(s, e) }, s.label));\r\n        }))));\r\n};\r\nexport default memo(Select);\r\n","references":["/Users/sjq/Desktop/study/concis/Concis/node_modules/@types/react/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/node_modules/@ant-design/icons/lib/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/Form/index.tsx","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/GlobalConfig/interface.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/GlobalConfig/index.tsx"]}
