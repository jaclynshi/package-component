{"code":"import React, { useEffect, useCallback, useState, createRef, useMemo, memo } from 'react';\r\nimport { PlusOutlined, CaretUpOutlined, CaretDownOutlined, SearchOutlined, } from '@ant-design/icons';\r\nimport CheckBox from '../CheckBox';\r\nimport Pagination from '../Pagination';\r\nimport Popover from '../Popover';\r\nimport Input from '../Input';\r\nimport './style/index.module.less';\r\nlet sTop = 0;\r\nconst options = [10, 20, 30, 50];\r\nconst Table = (props) => {\r\n    var _a, _b;\r\n    const { titleParams, tableData, align, expandedRowRender, radio, checked, radioSelectCallback, checkedSelectCallback, filter, avableSort, virtualized, largeDateShowNum = 10, lazyLoad, pagination, paginationAlign, pageSizeOption, changePNumCallback, changePSizeCallback, dropabled, dropCallback, } = props;\r\n    const [doColumnData, setDoColumnData] = useState(titleParams); //表头数据\r\n    const [doTableData, setDoTableData] = useState(tableData); //表数据\r\n    const [radioRow, setRadioRow] = useState({}); //单选选中行\r\n    const [checkedRow, setCheckedRow] = useState([]); //单选选中行\r\n    const [scrollTop, setScrollTop] = useState(0);\r\n    const [pageSize, setPageSize] = useState(options[0]);\r\n    const [pageNum, setPageNum] = useState(1);\r\n    const scrollDom = createRef();\r\n    useEffect(() => {\r\n        let newDoTableData = [...doTableData];\r\n        if (expandedRowRender) {\r\n            //展开行处理\r\n            newDoTableData.forEach((item) => {\r\n                item.openLine = '';\r\n            });\r\n        }\r\n        if (avableSort) {\r\n            //排序处理\r\n            setDoColumnData((old) => {\r\n                old.forEach((item) => {\r\n                    if (Array.isArray(item.sorter)) {\r\n                        item.sorter = item.sorter.map((s) => {\r\n                            return {\r\n                                fn: s,\r\n                                sorted: false,\r\n                            };\r\n                        });\r\n                    }\r\n                });\r\n                return [...old];\r\n            });\r\n        }\r\n        if (virtualized || lazyLoad) {\r\n            newDoTableData = newDoTableData.slice(0, largeDateShowNum || 10);\r\n        }\r\n        if (pagination) {\r\n            newDoTableData = newDoTableData.slice(0, pageSize);\r\n        }\r\n        setDoTableData(newDoTableData);\r\n    }, []);\r\n    const tableStyle = useCallback((thData) => {\r\n        //表头样式\r\n        const styleResult = {\r\n            width: 'auto',\r\n        };\r\n        if (thData === null || thData === void 0 ? void 0 : thData.width) {\r\n            styleResult.width = `${thData.width}px`;\r\n        }\r\n        return styleResult;\r\n    }, [titleParams]);\r\n    const openRow = (row, key) => {\r\n        //展开列表\r\n        if (expandedRowRender) {\r\n            expandedRowRender(row);\r\n            const newTableData = [...doTableData];\r\n            if (newTableData[key].openLine) {\r\n                newTableData[key].openLine = '';\r\n            }\r\n            else {\r\n                if (expandedRowRender(row)) {\r\n                }\r\n                newTableData[key]['openLine'] = expandedRowRender(row);\r\n            }\r\n            setDoTableData(newTableData);\r\n        }\r\n    };\r\n    const radioSelectRow = (row) => {\r\n        //单选行\r\n        setRadioRow(row);\r\n        radioSelectCallback && radioSelectCallback(row);\r\n    };\r\n    const checkedSelectRow = (checked, row) => {\r\n        //多选单行\r\n        setCheckedRow((old) => {\r\n            if (checked) {\r\n                old.push(row);\r\n            }\r\n            else {\r\n                const delIndex = old.findIndex((s) => s == row);\r\n                old.splice(delIndex, 1);\r\n            }\r\n            checkedSelectCallback && checkedSelectCallback(old);\r\n            return [...old];\r\n        });\r\n    };\r\n    const checkAll = (checked) => {\r\n        // 全部选中\r\n        setCheckedRow((old) => {\r\n            if (checked) {\r\n                //全选\r\n                old = doTableData;\r\n            }\r\n            else {\r\n                //全不选\r\n                old = [];\r\n            }\r\n            checkedSelectCallback && checkedSelectCallback(old);\r\n            return [...old];\r\n        });\r\n    };\r\n    const sortColumn = (index, row, sortType) => {\r\n        //表格单列排序  -> 2为升序 3为降序\r\n        const sortKey = row.dataIndex;\r\n        const newTableData = [...doTableData];\r\n        if (Array.isArray(row.sorter) && typeof row.sorter[0] == 'object') {\r\n            //自定义排序\r\n            newTableData.sort(row.sorter[sortType - 2].fn);\r\n            setDoTableData(newTableData);\r\n            setDoColumnData((old) => {\r\n                if (sortType == 2) {\r\n                    old[index].sorter[0].sorted = true;\r\n                    old[index].sorter[1].sorted = false;\r\n                }\r\n                else {\r\n                    old[index].sorter[0].sorted = false;\r\n                    old[index].sorter[1].sorted = true;\r\n                }\r\n                return [...old];\r\n            });\r\n        }\r\n        else {\r\n            //默认排序\r\n            newTableData.sort((a, b) => {\r\n                return sortType == 2 ? a[sortKey] - b[sortKey] : b[sortKey] - a[sortKey];\r\n            });\r\n            setDoTableData(newTableData);\r\n            setDoColumnData((old) => {\r\n                old[index].sorter = sortType;\r\n                return [...old];\r\n            });\r\n        }\r\n    };\r\n    const handleIptChange = (v, t) => {\r\n        //筛选input改变回调\r\n        setDoColumnData((old) => {\r\n            old.forEach((item) => {\r\n                if (item == t) {\r\n                    if (item.filter)\r\n                        item.filter = v;\r\n                }\r\n            });\r\n            return [...old];\r\n        });\r\n    };\r\n    const filterList = (t) => {\r\n        setDoTableData((old) => {\r\n            if (t.filter == true) {\r\n                old = tableData;\r\n            }\r\n            else {\r\n                old = tableData.filter((item) => {\r\n                    return String(item[t.dataIndex]).includes(t.filter);\r\n                });\r\n            }\r\n            return [...old];\r\n        });\r\n    };\r\n    const renderContentTd = (rowData) => {\r\n        //渲染正文行\r\n        return Object.entries(rowData).map((value, key) => {\r\n            if (value[0] !== 'openLine') {\r\n                return (React.createElement(\"td\", { key: key, style: { textAlign: align ? align : 'left' } }, value[1]));\r\n            }\r\n        });\r\n    };\r\n    const sortIconStyle = useCallback((thRow, iconType) => {\r\n        //表头排序按钮样式\r\n        if (typeof thRow.sorter == 'number' || typeof thRow.sorter == 'boolean') {\r\n            //默认排序\r\n            if (iconType == 0) {\r\n                //升序箭头\r\n                return {\r\n                    color: thRow.sorter == 2 ? '#1890ff' : '#a9adb2',\r\n                };\r\n            }\r\n            else {\r\n                //降序箭头\r\n                return {\r\n                    color: thRow.sorter == 3 ? '#1890ff' : '#a9adb2',\r\n                };\r\n            }\r\n        }\r\n        else {\r\n            //自定义排序\r\n            if (iconType == 0) {\r\n                //升序箭头\r\n                return {\r\n                    color: thRow.sorter[0].sorted ? '#1890ff' : '#a9adb2',\r\n                };\r\n            }\r\n            else {\r\n                //降序箭头\r\n                return {\r\n                    color: thRow.sorter[1].sorted ? '#1890ff' : '#a9adb2',\r\n                };\r\n            }\r\n        }\r\n    }, [titleParams, doColumnData]);\r\n    const scrollTable = (e) => {\r\n        var _a, _b, _c;\r\n        if (virtualized) {\r\n            //虚拟加载\r\n            const top = scrollDom.current.scrollTop;\r\n            //滚到底，不继续滚\r\n            if ((tableData.length + 2) *\r\n                ((_a = document.querySelector('.victurl-scroll-tr')) === null || _a === void 0 ? void 0 : _a.offsetHeight) -\r\n                sTop <\r\n                (largeDateShowNum + 2) *\r\n                    ((_b = document.querySelector('.victurl-scroll-tr')) === null || _b === void 0 ? void 0 : _b.offsetHeight) &&\r\n                top > sTop) {\r\n                return;\r\n            }\r\n            const listHeight = ((_c = document.querySelector('.victurl-scroll-tr')) === null || _c === void 0 ? void 0 : _c.offsetHeight) || 40;\r\n            sTop = top;\r\n            setScrollTop(top);\r\n            setDoTableData((old) => {\r\n                const showNum = largeDateShowNum ? largeDateShowNum : 10;\r\n                old = tableData.slice(Math.floor(top / listHeight), Math.floor(top / listHeight) + showNum);\r\n                return [...old];\r\n            });\r\n        }\r\n        else if (lazyLoad) {\r\n            //懒加载\r\n            if (e.nativeEvent.target.scrollHeight -\r\n                e.nativeEvent.target.clientHeight -\r\n                e.nativeEvent.target.scrollTop ==\r\n                0) {\r\n                setTimeout(() => {\r\n                    setDoTableData((old) => {\r\n                        old = [...old, ...tableData.slice(old.length + 1, old.length + 11)];\r\n                        return [...old];\r\n                    });\r\n                }, 300);\r\n            }\r\n        }\r\n    };\r\n    const changePageCallback = (pageNum) => {\r\n        //页码改变回调\r\n        setPageNum(pageNum);\r\n        setDoTableData((old) => {\r\n            old = tableData.slice((pageNum - 1) * pageSize, (pageNum - 1) * pageSize + pageSize);\r\n            return [...old];\r\n        });\r\n        changePNumCallback &&\r\n            changePNumCallback(pageNum, tableData.slice((pageNum - 1) * pageSize, (pageNum - 1) * pageSize + pageSize));\r\n    };\r\n    const changePageSizeCallback = (pageSize) => {\r\n        //页数改变回调\r\n        setPageSize(pageSize);\r\n        setDoTableData((old) => {\r\n            old = tableData.slice(0, pageSize);\r\n            return [...old];\r\n        });\r\n        changePSizeCallback && changePSizeCallback(pageSize, tableData.slice(0, pageSize));\r\n    };\r\n    const dargStart = (e, index) => {\r\n        e.nativeEvent.dataTransfer.setData('dragKey', index);\r\n    };\r\n    const drop = (e, index) => {\r\n        e.nativeEvent.preventDefault();\r\n        const drapIndex = e.nativeEvent.dataTransfer.getData('dragKey');\r\n        const dropIndex = index;\r\n        setDoTableData((old) => {\r\n            [old[drapIndex], old[dropIndex]] = [old[dropIndex], old[drapIndex]];\r\n            dropCallback && dropCallback(old);\r\n            return [...old];\r\n        });\r\n    };\r\n    const dragOver = (e) => {\r\n        e.nativeEvent.preventDefault();\r\n    };\r\n    const renderScrollList = useCallback(() => {\r\n        //虚拟列表tr栏渲染\r\n        return doTableData === null || doTableData === void 0 ? void 0 : doTableData.map((t, key) => {\r\n            return (React.createElement(React.Fragment, null,\r\n                React.createElement(\"tr\", { key: key, className: \"victurl-scroll-tr\" },\r\n                    //展开行\r\n                    expandedRowRender && (React.createElement(\"td\", { style: { textAlign: align || 'left', cursor: 'pointer' }, onClick: () => openRow(t, key) },\r\n                        React.createElement(PlusOutlined, null))),\r\n                    //单选\r\n                    radio && (React.createElement(\"td\", { style: { textAlign: align || 'left', cursor: 'pointer' } },\r\n                        React.createElement(\"input\", { className: \"radioBox\", type: \"radio\", checked: radioRow == t ? true : false, onClick: () => radioSelectRow(t) }))),\r\n                    //多选\r\n                    checked && (React.createElement(\"td\", { style: { textAlign: align || 'left', cursor: 'pointer' } },\r\n                        React.createElement(CheckBox, { checked: checkedRow.indexOf(t) == -1 ? false : true, checkCallback: (check) => checkedSelectRow(check, t) }, checkedRow.indexOf(t) == -1))),\r\n                    renderContentTd(t)),\r\n                t.openLine && (React.createElement(\"tr\", null,\r\n                    React.createElement(\"td\", { style: { textAlign: align || 'left' }, colSpan: Object.keys(doTableData[0]).length + 1 }, t.openLine)))));\r\n        });\r\n    }, [doTableData, sTop, scrollTop, checkedRow, radioRow]);\r\n    const tableContentRender = () => {\r\n        var _a;\r\n        //表正文渲染\r\n        if (virtualized) {\r\n            //虚拟列表\r\n            return (React.createElement(\"div\", { style: {\r\n                    height: (tableData.length + 2) *\r\n                        ((_a = document.querySelector('.victurl-scroll-tr')) === null || _a === void 0 ? void 0 : _a.offsetHeight) -\r\n                        sTop +\r\n                        'px',\r\n                    transform: `translateY(${sTop}px)`,\r\n                } },\r\n                React.createElement(\"thead\", null,\r\n                    React.createElement(\"tr\", null,\r\n                        (expandedRowRender || radio) && (React.createElement(\"th\", { style: { textAlign: align || 'left' } })),\r\n                        checked && (React.createElement(\"th\", { style: { textAlign: align || 'left' } },\r\n                            React.createElement(CheckBox, { checked: checkedRow.length == doTableData.length, checkCallback: (checked) => checkAll(checked) }))), doColumnData === null || doColumnData === void 0 ? void 0 :\r\n                        doColumnData.map((t, key) => {\r\n                            return (React.createElement(\"th\", { key: key, style: tableStyle(t), className: \"tableHead\" },\r\n                                React.createElement(\"div\", { style: {\r\n                                        display: 'flex',\r\n                                        justifyContent: align || 'flex-start',\r\n                                        alignItems: 'center',\r\n                                    } },\r\n                                    React.createElement(\"span\", null, t.title),\r\n                                    (t === null || t === void 0 ? void 0 : t.sorter) && avableSort && (React.createElement(\"div\", { className: \"sort-icon\" },\r\n                                        React.createElement(CaretUpOutlined, { onClick: () => sortColumn(key, t, 2), style: sortIconStyle(t, 0) }),\r\n                                        React.createElement(CaretDownOutlined, { onClick: () => sortColumn(key, t, 3), style: sortIconStyle(t, 1) }))),\r\n                                    (t === null || t === void 0 ? void 0 : t.filter) && filter && (React.createElement(Popover, { type: \"click\", align: \"bottom\", dialogWidth: 130, noBorder: true, content: React.createElement(\"div\", { className: \"filter-dialog\" },\r\n                                            React.createElement(Input, { placeholder: \"\\u8BF7\\u8F93\\u5165\", width: \"70\", handleIptChange: (v) => handleIptChange(v, t) }),\r\n                                            React.createElement(\"div\", { className: \"search-btn\", onClick: () => filterList(t) },\r\n                                                React.createElement(SearchOutlined, null))) },\r\n                                        React.createElement(\"div\", { className: \"search-th-btn\" },\r\n                                            React.createElement(SearchOutlined, null)))))));\r\n                        }))),\r\n                React.createElement(\"tbody\", null, renderScrollList())));\r\n        }\r\n        else if (lazyLoad) {\r\n            //懒加载\r\n            return (React.createElement(\"tbody\", null, doTableData === null || doTableData === void 0 ? void 0 : doTableData.map((t, key) => {\r\n                return (React.createElement(React.Fragment, null,\r\n                    React.createElement(\"tr\", { key: key },\r\n                        //展开行\r\n                        expandedRowRender && (React.createElement(\"td\", { style: { textAlign: align || 'left', cursor: 'pointer' }, onClick: () => openRow(t, key) },\r\n                            React.createElement(PlusOutlined, null))),\r\n                        //单选\r\n                        radio && (React.createElement(\"td\", { style: { textAlign: align || 'left', cursor: 'pointer' } },\r\n                            React.createElement(\"input\", { className: \"radioBox\", type: \"radio\", checked: radioRow == t ? true : false, onClick: () => radioSelectRow(t) }))),\r\n                        //多选\r\n                        checked && (React.createElement(\"td\", { style: { textAlign: align || 'left', cursor: 'pointer' } },\r\n                            React.createElement(CheckBox, { checked: checkedRow.indexOf(t) == -1 ? false : true, checkCallback: (check) => checkedSelectRow(check, t) }, checkedRow.indexOf(t) == -1))),\r\n                        renderContentTd(t)),\r\n                    t.openLine && (React.createElement(\"tr\", null,\r\n                        React.createElement(\"td\", { style: { textAlign: align || 'left' }, colSpan: Object.keys(doTableData[0]).length + 1 }, t.openLine)))));\r\n            })));\r\n        }\r\n        else if (pagination) {\r\n            //分页渲染\r\n            return (React.createElement(\"tbody\", null, \r\n            //常规表正文\r\n            doTableData === null || doTableData === void 0 ? void 0 : doTableData.map((t, key) => {\r\n                return (React.createElement(React.Fragment, null,\r\n                    React.createElement(\"tr\", { key: key },\r\n                        //展开行\r\n                        expandedRowRender && (React.createElement(\"td\", { style: { textAlign: align || 'left', cursor: 'pointer' }, onClick: () => openRow(t, key) },\r\n                            React.createElement(PlusOutlined, null))),\r\n                        //单选\r\n                        radio && (React.createElement(\"td\", { style: { textAlign: align || 'left', cursor: 'pointer' } },\r\n                            React.createElement(\"input\", { className: \"radioBox\", type: \"radio\", checked: radioRow == t ? true : false, onClick: () => radioSelectRow(t) }))),\r\n                        //多选\r\n                        checked && (React.createElement(\"td\", { style: { textAlign: align || 'left', cursor: 'pointer' } },\r\n                            React.createElement(CheckBox, { checked: checkedRow.indexOf(t) == -1 ? false : true, checkCallback: (check) => checkedSelectRow(check, t) }, checkedRow.indexOf(t) == -1))),\r\n                        renderContentTd(t)),\r\n                    t.openLine && (React.createElement(\"tr\", null,\r\n                        React.createElement(\"td\", { style: { textAlign: align || 'left' }, colSpan: Object.keys(doTableData[0]).length + 1 }, t.openLine)))));\r\n            })));\r\n        }\r\n        else if (dropabled) {\r\n            //拖拽表渲染\r\n            return (React.createElement(\"tbody\", null, \r\n            //常规表正文\r\n            doTableData === null || doTableData === void 0 ? void 0 : doTableData.map((t, key) => {\r\n                return (React.createElement(React.Fragment, null,\r\n                    React.createElement(\"tr\", { key: key, style: { cursor: 'move' }, draggable: true, onDragStart: (e) => dargStart(e, key), onDrop: (e) => drop(e, key), onDragOver: (e) => dragOver(e) },\r\n                        //展开行\r\n                        expandedRowRender && (React.createElement(\"td\", { style: { textAlign: align || 'left', cursor: 'pointer' }, onClick: () => openRow(t, key) },\r\n                            React.createElement(PlusOutlined, null))),\r\n                        //单选\r\n                        radio && (React.createElement(\"td\", { style: { textAlign: align || 'left', cursor: 'pointer' } },\r\n                            React.createElement(\"input\", { className: \"radioBox\", type: \"radio\", checked: radioRow == t ? true : false, onClick: () => radioSelectRow(t) }))),\r\n                        //多选\r\n                        checked && (React.createElement(\"td\", { style: { textAlign: align || 'left', cursor: 'pointer' } },\r\n                            React.createElement(CheckBox, { checked: checkedRow.indexOf(t) == -1 ? false : true, checkCallback: (check) => checkedSelectRow(check, t) }, checkedRow.indexOf(t) == -1))),\r\n                        renderContentTd(t)),\r\n                    t.openLine && (React.createElement(\"tr\", null,\r\n                        React.createElement(\"td\", { style: { textAlign: align || 'left' }, colSpan: Object.keys(doTableData[0]).length + 1 }, t.openLine)))));\r\n            })));\r\n        }\r\n        else {\r\n            //常规表渲染\r\n            return (React.createElement(\"tbody\", null, \r\n            //常规表正文\r\n            doTableData === null || doTableData === void 0 ? void 0 : doTableData.map((t, key) => {\r\n                return (React.createElement(React.Fragment, null,\r\n                    React.createElement(\"tr\", { key: key },\r\n                        //展开行\r\n                        expandedRowRender && (React.createElement(\"td\", { style: { textAlign: align || 'left', cursor: 'pointer' }, onClick: () => openRow(t, key) },\r\n                            React.createElement(PlusOutlined, null))),\r\n                        //单选\r\n                        radio && (React.createElement(\"td\", { style: { textAlign: align || 'left', cursor: 'pointer' } },\r\n                            React.createElement(\"input\", { className: \"radioBox\", type: \"radio\", checked: radioRow == t ? true : false, onClick: () => radioSelectRow(t) }))),\r\n                        //多选\r\n                        checked && (React.createElement(\"td\", { style: { textAlign: align || 'left', cursor: 'pointer' } },\r\n                            React.createElement(CheckBox, { checked: checkedRow.indexOf(t) == -1 ? false : true, checkCallback: (check) => checkedSelectRow(check, t) }, checkedRow.indexOf(t) == -1))),\r\n                        renderContentTd(t)),\r\n                    t.openLine && (React.createElement(\"tr\", null,\r\n                        React.createElement(\"td\", { style: { textAlign: align || 'left' }, colSpan: Object.keys(doTableData[0]).length + 1 }, t.openLine)))));\r\n            })));\r\n        }\r\n    };\r\n    const paginationAlignStyle = useMemo(() => {\r\n        let returnStyle = {};\r\n        if (!paginationAlign) {\r\n            returnStyle = {\r\n                justifyContent: 'flex-start',\r\n            };\r\n        }\r\n        else {\r\n            switch (paginationAlign) {\r\n                case 'left':\r\n                    returnStyle = {\r\n                        justifyContent: 'flex-start',\r\n                    };\r\n                    break;\r\n                case 'center':\r\n                    returnStyle = {\r\n                        justifyContent: 'center',\r\n                    };\r\n                    break;\r\n                case 'right':\r\n                    returnStyle = {\r\n                        justifyContent: 'flex-end',\r\n                    };\r\n                    break;\r\n            }\r\n        }\r\n        return returnStyle;\r\n    }, [paginationAlign]);\r\n    return (React.createElement(\"div\", { className: \"table-container\", style: virtualized || lazyLoad\r\n            ? {\r\n                height: `${(largeDateShowNum + 2) *\r\n                    ((_a = document.querySelector('.victurl-scroll-tr')) === null || _a === void 0 ? void 0 : _a.offsetHeight)}px`,\r\n            }\r\n            : {} },\r\n        React.createElement(\"div\", { className: \"table\", style: virtualized || lazyLoad\r\n                ? {\r\n                    maxHeight: `${(largeDateShowNum + 2) *\r\n                        ((_b = document.querySelector('.victurl-scroll-tr')) === null || _b === void 0 ? void 0 : _b.offsetHeight)}px`,\r\n                    overflow: 'scroll',\r\n                    position: 'absolute',\r\n                    top: '40px',\r\n                    left: '0',\r\n                }\r\n                : {}, onScroll: (e) => scrollTable(e), ref: scrollDom },\r\n            React.createElement(\"table\", null,\r\n                //常规表格\r\n                !virtualized && (React.createElement(\"thead\", null,\r\n                    React.createElement(\"tr\", null,\r\n                        (expandedRowRender || radio) && (React.createElement(\"th\", { style: { textAlign: align || 'left' } })),\r\n                        checked && (React.createElement(\"th\", { style: { textAlign: align || 'left' } },\r\n                            React.createElement(CheckBox, { checked: checkedRow.length == doTableData.length, checkCallback: (checked) => checkAll(checked) }))),\r\n                        doColumnData.map((t, key) => {\r\n                            return (React.createElement(\"th\", { key: key, style: tableStyle(t), className: \"tableHead\" },\r\n                                React.createElement(\"div\", { style: {\r\n                                        display: 'flex',\r\n                                        justifyContent: align || 'flex-start',\r\n                                        alignItems: 'center',\r\n                                    } },\r\n                                    React.createElement(\"span\", null, t.title),\r\n                                    (t === null || t === void 0 ? void 0 : t.sorter) && avableSort && (React.createElement(\"div\", { className: \"sort-icon\" },\r\n                                        React.createElement(CaretUpOutlined, { onClick: () => sortColumn(key, t, 2), style: sortIconStyle(t, 0) }),\r\n                                        React.createElement(CaretDownOutlined, { onClick: () => sortColumn(key, t, 3), style: sortIconStyle(t, 1) }))),\r\n                                    (t === null || t === void 0 ? void 0 : t.filter) && filter && (React.createElement(Popover, { type: \"click\", align: \"bottom\", dialogWidth: 130, noBorder: true, content: React.createElement(\"div\", { className: \"filter-dialog\" },\r\n                                            React.createElement(Input, { placeholder: \"\\u8BF7\\u8F93\\u5165\", width: \"70\", handleIptChange: (v) => handleIptChange(v, t) }),\r\n                                            React.createElement(\"div\", { className: \"search-btn\", onClick: () => filterList(t) },\r\n                                                React.createElement(SearchOutlined, null))) },\r\n                                        React.createElement(\"div\", { className: \"search-th-btn\" },\r\n                                            React.createElement(SearchOutlined, null)))))));\r\n                        })))),\r\n                //表正文\r\n                tableContentRender())),\r\n        pagination && (React.createElement(\"div\", { className: \"pagination\", style: paginationAlignStyle },\r\n            React.createElement(Pagination, { style: paginationAlignStyle, total: tableData.length, showSizeChanger: true, pageSizeOptions: pageSizeOption || options, showJumpInput: true, changePageSizeCallback: changePageSizeCallback, changePageCallback: changePageCallback })))));\r\n};\r\nexport default memo(Table);\r\n","references":["/Users/sjq/Desktop/study/concis/Concis/node_modules/@types/react/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/node_modules/@ant-design/icons/lib/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/Table/interface.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/CheckBox/index.tsx","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/Pagination/index.tsx","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/Popover/index.tsx","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/Input/index.tsx"]}
