{"code":"import React, { createContext, useMemo, useState, useEffect, useRef } from 'react';\r\nimport Item from './item';\r\nimport './style/list.module.less';\r\nexport const ctx = createContext({}); //顶层通信装置\r\nconst List = (props) => {\r\n    const { style = {}, dataSource, render, header, size = 'default', lazyLoad = false, defaultShowNum = 5, virtualListProps, virtualShowNum = 5, lazyScrollToBottom, } = props;\r\n    const contextProps = {\r\n        size,\r\n    };\r\n    const [formatDataSrouce, setFormatDataSource] = useState(dataSource ? [...dataSource] : []); //处理过的数据源\r\n    const [scrollTop, setScrollTop] = useState(0);\r\n    const listItemHeight = useRef(null);\r\n    const listContentRef = useRef(null);\r\n    const victurlListContentRef = useRef(null);\r\n    useEffect(() => {\r\n        var _a;\r\n        if (lazyLoad && defaultShowNum) {\r\n            setFormatDataSource((old) => {\r\n                old = dataSource.slice(0, defaultShowNum);\r\n                return [...old];\r\n            });\r\n        }\r\n        else if (virtualListProps) {\r\n            let rowHeight = (_a = document.querySelector('.list-item')) === null || _a === void 0 ? void 0 : _a.clientHeight;\r\n            switch (size) {\r\n                case 'default':\r\n                    rowHeight += 26;\r\n                    break;\r\n                case 'small':\r\n                    rowHeight += 18;\r\n                    break;\r\n                case 'large':\r\n                    rowHeight += 34;\r\n                    break;\r\n            }\r\n            listItemHeight.current = rowHeight;\r\n            setFormatDataSource((old) => {\r\n                old = dataSource.slice(0, virtualShowNum + 2);\r\n                return [...old];\r\n            });\r\n        }\r\n    }, []);\r\n    const listHeaderStyle = useMemo(() => {\r\n        //头部样式\r\n        const defaultStyles = {};\r\n        switch (size) {\r\n            case 'default':\r\n                defaultStyles.padding = '12px 20px';\r\n                break;\r\n            case 'small':\r\n                defaultStyles.padding = '8px 20px';\r\n                break;\r\n            case 'large':\r\n                defaultStyles.padding = '16px 20px';\r\n                break;\r\n        }\r\n        return defaultStyles;\r\n    }, [size]);\r\n    const listStyle = useMemo(() => {\r\n        //表整体样式\r\n        return style;\r\n    }, [style]);\r\n    const listContentStyle = useMemo(() => {\r\n        //表正文样式\r\n        const returnStyle = {};\r\n        if (lazyLoad && defaultShowNum) {\r\n            returnStyle.height = '400px';\r\n            returnStyle.overflow = 'scroll';\r\n        }\r\n        return returnStyle;\r\n    }, [lazyLoad, defaultShowNum]);\r\n    const scrollList = () => {\r\n        const { scrollHeight, clientHeight, scrollTop } = listContentRef.current;\r\n        const bottomTran = scrollHeight - clientHeight - scrollTop; //距离底部距离\r\n        if (bottomTran === 0) {\r\n            lazyScrollToBottom && lazyScrollToBottom(bottomTran, true);\r\n            setTimeout(() => {\r\n                setFormatDataSource((old) => {\r\n                    old = dataSource.slice(0, old.length + defaultShowNum);\r\n                    return [...old];\r\n                });\r\n            }, 500);\r\n        }\r\n        else {\r\n            lazyScrollToBottom && lazyScrollToBottom(bottomTran, false);\r\n        }\r\n    };\r\n    const victurlScroll = () => {\r\n        const startIndex = Math.floor(victurlListContentRef.current.scrollTop / listItemHeight.current);\r\n        setScrollTop(victurlListContentRef.current.scrollTop);\r\n        setFormatDataSource((old) => {\r\n            old = dataSource.slice(startIndex, startIndex + virtualShowNum + 2);\r\n            return [...old];\r\n        });\r\n    };\r\n    return (React.createElement(ctx.Provider, { value: contextProps },\r\n        React.createElement(\"div\", { className: \"rList\", style: listStyle },\r\n            React.createElement(\"div\", { className: \"list-header\", style: listHeaderStyle }, header),\r\n            virtualListProps ? (React.createElement(\"div\", { className: \"victurl-list-content\", style: { height: virtualShowNum * listItemHeight.current + 'px' }, ref: victurlListContentRef, onScroll: victurlScroll },\r\n                React.createElement(\"div\", { className: \"victurl-relly-content\", style: {\r\n                        height: dataSource.length * listItemHeight.current - scrollTop + 'px',\r\n                        transform: `translate(0, ${scrollTop}px)`,\r\n                    } }, formatDataSrouce.length !== 0 && formatDataSrouce.map(render)))) : (React.createElement(\"div\", { className: \"list-content\", style: listContentStyle, ref: listContentRef, onScroll: scrollList }, formatDataSrouce.length !== 0 && formatDataSrouce.map(render))))));\r\n};\r\nconst ListComponent = React.forwardRef(List);\r\nListComponent.Item = Item;\r\nListComponent.displayName = 'List';\r\nexport default ListComponent;\r\n","references":["/Users/sjq/Desktop/study/concis/Concis/node_modules/@types/react/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/List/interface.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/List/item.tsx"]}
