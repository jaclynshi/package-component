{"code":"import React, { useEffect, useRef, useState, Fragment, useMemo, useContext } from 'react';\r\nimport { globalCtx } from '../GlobalConfig';\r\nimport './index.module.less';\r\nconst Loading = (props) => {\r\n    const { type = 'default', mask = false, loadingText, icon, width = '2em', height = '2em', style = {}, } = props;\r\n    const timer = useRef(null);\r\n    const [activeDotIndex, setActiveDotIndex] = useState(0);\r\n    const { globalColor } = useContext(globalCtx);\r\n    useEffect(() => {\r\n        timer.current = setInterval(() => {\r\n            setActiveDotIndex((old) => {\r\n                if (old === 2) {\r\n                    old = 0;\r\n                }\r\n                else {\r\n                    old++;\r\n                }\r\n                return old;\r\n            });\r\n        }, 500);\r\n        return () => {\r\n            clearInterval(timer.current);\r\n        };\r\n    }, []);\r\n    const loadingStyle = useMemo(() => {\r\n        const returnStyle = style;\r\n        returnStyle.width = width;\r\n        returnStyle.height = height;\r\n        if (globalColor) {\r\n            returnStyle.color = globalColor;\r\n        }\r\n        return returnStyle;\r\n    }, [width, height, style]);\r\n    const gloabLoadingStyle = useMemo(() => {\r\n        if (globalColor) {\r\n            return {\r\n                background: globalColor,\r\n            };\r\n        }\r\n        return {};\r\n    }, [globalColor]);\r\n    const renderLoadingContainer = useMemo(() => {\r\n        if (type === 'default') {\r\n            return (React.createElement(\"div\", { className: \"loading\", style: loadingStyle },\r\n                React.createElement(\"div\", { className: \"loading-container\" }, icon || (React.createElement(\"svg\", { fill: \"none\", stroke: \"currentColor\", \"stroke-width\": \"4\", width: width, height: height, viewBox: \"0 0 48 48\", \"aria-hidden\": \"true\", focusable: \"false\" },\r\n                    React.createElement(\"path\", { d: \"M42 24c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6\" })))),\r\n                loadingText && React.createElement(\"div\", { className: \"text\" }, loadingText)));\r\n        }\r\n        else if (type === 'dot') {\r\n            return (React.createElement(\"div\", { className: \"dot-loading\" }, new Array(3).fill('').map((item, index) => {\r\n                return (React.createElement(\"div\", { className: activeDotIndex === index ? 'dot-active' : 'dot', style: gloabLoadingStyle }, item));\r\n            })));\r\n        }\r\n        else if (type === 'strip') {\r\n            return (React.createElement(\"div\", { className: \"strip\" }, new Array(6).fill('').map((item, index) => {\r\n                return (React.createElement(\"div\", { className: \"strip-list\", style: Object.assign(Object.assign({}, gloabLoadingStyle), { '--lineIndex': index }) }));\r\n            })));\r\n        }\r\n    }, [type, activeDotIndex]);\r\n    return (React.createElement(Fragment, null,\r\n        mask && React.createElement(\"div\", { className: \"dialog\" }),\r\n        renderLoadingContainer));\r\n};\r\nexport default Loading;\r\n","references":["/Users/sjq/Desktop/study/concis/Concis/node_modules/@types/react/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/Loading/interface.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/GlobalConfig/interface.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/GlobalConfig/index.tsx"]}
