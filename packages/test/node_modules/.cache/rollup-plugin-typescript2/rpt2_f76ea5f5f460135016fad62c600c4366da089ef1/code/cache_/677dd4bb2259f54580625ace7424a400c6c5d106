{"code":"import React, { memo, Fragment, useState, useEffect, useCallback, useContext } from 'react';\r\nimport { CaretRightOutlined, CaretDownOutlined } from '@ant-design/icons';\r\nimport Input from '../Input';\r\nimport { ctx } from '../Form';\r\nimport { globalCtx } from '../GlobalConfig';\r\nimport './index.module.less';\r\nconst Tree = (props) => {\r\n    const { width = '200', treeData, avaSearch, avaChooseMore, defaultOpen, chooseCallback } = props;\r\n    const [stateTreeData, setStateTreeData] = useState(treeData); //树结构\r\n    const [activedVal, setActivedVal] = useState(''); //选中的节点值\r\n    const [containerHeight, setContainerHeight] = useState('0px'); //容器高度\r\n    const [isFocus, setIsFocus] = useState(false); //聚焦状态\r\n    const formCtx = useContext(ctx);\r\n    const { globalColor, treeSelectTextColor } = useContext(globalCtx);\r\n    useEffect(() => {\r\n        resolveTreeData(treeData, 1);\r\n        window.addEventListener('click', () => setContainerHeight('0px'));\r\n    }, []);\r\n    useEffect(() => {\r\n        //用于监听Form组件的重置任务\r\n        if (formCtx.reset) {\r\n            resolveTreeData(treeData, 1);\r\n            setActivedVal('');\r\n        }\r\n    }, [formCtx.reset]);\r\n    useEffect(() => {\r\n        if (formCtx.submitStatus) {\r\n            formCtx.getChildVal(activedVal);\r\n        }\r\n    }, [formCtx.submitStatus]);\r\n    const resolveTreeData = (treeData, nowIndexLevel) => {\r\n        //二次处理treeData\r\n        treeData.forEach((treeNode) => {\r\n            var _a;\r\n            treeNode.level = nowIndexLevel;\r\n            if (defaultOpen) {\r\n                //默认全展开\r\n                treeNode.height = '30px';\r\n            }\r\n            else {\r\n                treeNode.height = treeNode.level == 1 ? '30px' : '0';\r\n            }\r\n            if ((_a = treeNode === null || treeNode === void 0 ? void 0 : treeNode.children) === null || _a === void 0 ? void 0 : _a.length) {\r\n                //有子节点\r\n                resolveTreeData(treeNode.children, nowIndexLevel + 1);\r\n            }\r\n            else {\r\n                //没有子节点，重置level为当前层级，继续寻找\r\n                nowIndexLevel = treeNode.level;\r\n            }\r\n        });\r\n        setStateTreeData(treeData); //更新状态\r\n    };\r\n    const toggleTreeMenu = (clickTreeNode) => {\r\n        var _a;\r\n        //菜单切换或直接选中终极节点\r\n        if ((_a = clickTreeNode === null || clickTreeNode === void 0 ? void 0 : clickTreeNode.children) === null || _a === void 0 ? void 0 : _a.length) {\r\n            //菜单切换的情况\r\n            const oldStateTree = [...stateTreeData];\r\n            const editTreeNode = (treeNode) => {\r\n                //所选节点后代收起处理函数\r\n                treeNode.forEach((child) => {\r\n                    var _a;\r\n                    //找到节点，对子节点进行处理\r\n                    if ((_a = child === null || child === void 0 ? void 0 : child.children) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        child.height = '0';\r\n                        editTreeNode(child.children);\r\n                    }\r\n                    else {\r\n                        child.height = '0';\r\n                    }\r\n                });\r\n            };\r\n            const mapFn = (treeNode) => {\r\n                //深度优先查找节点函数\r\n                treeNode.forEach((t, i) => {\r\n                    var _a, _b;\r\n                    if (t.title == clickTreeNode.title && t.value == t.value) {\r\n                        if ((_a = t === null || t === void 0 ? void 0 : t.children) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            //后代节点处理，如果打开，只需打开下一代即可，如果关闭，需要关闭所有后代\r\n                            if (t.children[0].height == '0') {\r\n                                //打开\r\n                                t.children = t.children.map((child) => {\r\n                                    return Object.assign(Object.assign({}, child), { height: child.height == '0' ? '30px' : '0' });\r\n                                });\r\n                            }\r\n                            else {\r\n                                //关闭\r\n                                editTreeNode(t.children); //对后代节点进行处理\r\n                            }\r\n                        }\r\n                    }\r\n                    else if ((_b = t === null || t === void 0 ? void 0 : t.children) === null || _b === void 0 ? void 0 : _b.length) {\r\n                        mapFn(t.children);\r\n                    }\r\n                });\r\n            };\r\n            mapFn(oldStateTree);\r\n            setStateTreeData(oldStateTree);\r\n        }\r\n        else {\r\n            //选中终极节点的情况\r\n            if (avaChooseMore) {\r\n                //多选\r\n                if (activedVal.split(',').includes(clickTreeNode.title)) {\r\n                    //取消选中\r\n                    let updateVal = activedVal;\r\n                    updateVal = updateVal.split(',');\r\n                    updateVal.splice(activedVal.split(',').findIndex((t) => t == clickTreeNode.title), 1);\r\n                    updateVal = updateVal.join(',');\r\n                    setActivedVal(updateVal);\r\n                    chooseCallback && chooseCallback(updateVal);\r\n                }\r\n                else {\r\n                    setActivedVal(activedVal == '' ? clickTreeNode.title : activedVal + ',' + clickTreeNode.title);\r\n                    chooseCallback &&\r\n                        chooseCallback(activedVal == '' ? clickTreeNode.title : activedVal + ',' + clickTreeNode.title);\r\n                }\r\n            }\r\n            else {\r\n                //单选\r\n                setActivedVal(clickTreeNode.title);\r\n                chooseCallback && chooseCallback(clickTreeNode.title);\r\n            }\r\n        }\r\n    };\r\n    const handleIptChange = (val) => {\r\n        //文本改变回调\r\n        if (avaSearch) {\r\n            setActivedVal(val);\r\n        }\r\n        else {\r\n            setActivedVal('');\r\n        }\r\n    };\r\n    const handleClick = () => {\r\n        //点击回调\r\n        if (avaSearch) {\r\n            if (isFocus && containerHeight == '100%') {\r\n                setContainerHeight('0px');\r\n            }\r\n            else {\r\n                setContainerHeight('100%');\r\n            }\r\n        }\r\n        else {\r\n            setContainerHeight(containerHeight == '0px' ? '100%' : '0px');\r\n        }\r\n    };\r\n    const handleIptFocus = () => {\r\n        //聚焦回调\r\n        setTimeout(() => {\r\n            //异步，等待点击执行完毕\r\n            if (!isFocus) {\r\n                setIsFocus(true);\r\n            }\r\n        }, 150);\r\n    };\r\n    const handleIptBlur = () => {\r\n        //失去焦点回调\r\n        setIsFocus(false);\r\n    };\r\n    const searchStyle = useCallback((treeNode) => {\r\n        //搜索高亮样式\r\n        if (treeNode.title.includes(activedVal) && activedVal !== '') {\r\n            return treeSelectTextColor || '#1890FF';\r\n        }\r\n        else {\r\n            return '#000000';\r\n        }\r\n    }, [activedVal]);\r\n    const activedStyle = useCallback((treeNode) => {\r\n        //选中高亮样式\r\n        if (avaChooseMore) {\r\n            //多选\r\n            if (activedVal.split(',').includes(treeNode.title)) {\r\n                return globalColor || '#bae8ff';\r\n            }\r\n            else {\r\n                return '#ffffff';\r\n            }\r\n        }\r\n        else {\r\n            //单选\r\n            if (activedVal == treeNode.title) {\r\n                return globalColor || '#bae8ff';\r\n            }\r\n            else {\r\n                return '#ffffff';\r\n            }\r\n        }\r\n    }, [activedVal]);\r\n    const clearCallback = () => {\r\n        //清空\r\n        setActivedVal('');\r\n    };\r\n    const render = (data = stateTreeData) => {\r\n        //动态规划render函数\r\n        return data.map((treeNode, index) => {\r\n            var _a, _b;\r\n            return (React.createElement(Fragment, { key: index },\r\n                React.createElement(\"div\", { className: \"treeNode\", style: {\r\n                        marginLeft: `${treeNode.level * 10}px`,\r\n                        height: `${treeNode.height}`,\r\n                        color: searchStyle(treeNode),\r\n                        background: activedStyle(treeNode),\r\n                    }, onClick: () => toggleTreeMenu(treeNode) },\r\n                    ((_a = treeNode === null || treeNode === void 0 ? void 0 : treeNode.children) === null || _a === void 0 ? void 0 : _a.length) ? (treeNode.children[0].height == '0' ? (React.createElement(CaretDownOutlined, null)) : (React.createElement(CaretRightOutlined, null))) : (React.createElement(\"div\", { style: { width: '12px', height: '12px' } })) //空间占位符\r\n                ,\r\n                    React.createElement(\"span\", { className: \"text\" }, treeNode.title)),\r\n                ((_b = treeNode === null || treeNode === void 0 ? void 0 : treeNode.children) === null || _b === void 0 ? void 0 : _b.length) && render(treeNode.children)));\r\n        });\r\n    };\r\n    return (React.createElement(Fragment, null,\r\n        React.createElement(\"div\", { className: \"tree-container\", onClick: (e) => e.stopPropagation() },\r\n            React.createElement(Input, { moreStyle: avaSearch ? {} : { caretColor: 'transparent' }, placeholder: avaSearch ? '请输入' : '', width: width, defaultValue: activedVal, handleClick: handleClick, handleIptChange: handleIptChange, handleIptFocus: handleIptFocus, handleIptBlur: handleIptBlur, clearCallback: clearCallback, showClear: true, isFather: true }),\r\n            React.createElement(\"div\", { className: \"tree-select-dialog\", style: {\r\n                    width: `${width}px`,\r\n                    maxHeight: containerHeight == '0px' ? '0px' : '100%',\r\n                    opacity: containerHeight == '0px' ? '0' : '1',\r\n                    padding: containerHeight == '0px' ? '0 10px 0 10px' : '10px',\r\n                } }, render()))));\r\n};\r\nexport default memo(Tree);\r\n","references":["/Users/sjq/Desktop/study/concis/Concis/node_modules/@types/react/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/node_modules/@ant-design/icons/lib/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/Input/index.tsx","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/Form/index.tsx","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/GlobalConfig/interface.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/GlobalConfig/index.tsx"]}
