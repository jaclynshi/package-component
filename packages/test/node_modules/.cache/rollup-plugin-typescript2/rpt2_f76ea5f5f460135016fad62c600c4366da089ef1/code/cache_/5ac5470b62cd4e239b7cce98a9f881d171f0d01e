{"code":"import React, { memo, useState, useEffect, useMemo, useRef } from 'react';\r\nimport lodash from 'lodash';\r\nimport './index.module.less';\r\nconst Popover = (props) => {\r\n    const { children, type = 'hover', align = 'bottom', content, noBorder, dialogWidth = 200, propsVisiable, onVisableChange, } = props;\r\n    const showBtnRef = useRef();\r\n    const dialogRef = useRef();\r\n    const [showDialog, setShowDialog] = useState(propsVisiable || false); //是否显示\r\n    const [showBtnSize, setShowBtnSize] = useState({\r\n        width: '',\r\n        height: '',\r\n    });\r\n    useEffect(() => {\r\n        setShowBtnSize({\r\n            width: showBtnRef.current.offsetWidth,\r\n            height: showBtnRef.current.offsetHeight,\r\n        });\r\n        if (type == 'click') {\r\n            window.addEventListener('click', () => {\r\n                setShowDialog(false);\r\n                if (propsVisiable) {\r\n                    setShowDialog(false);\r\n                }\r\n            });\r\n        }\r\n    }, []);\r\n    useEffect(() => {\r\n        if (propsVisiable != undefined) {\r\n            setShowDialog(propsVisiable);\r\n        }\r\n    }, [propsVisiable]);\r\n    useEffect(() => {\r\n        const dialogDom = dialogRef.current;\r\n        if (showDialog) {\r\n            dialogDom.style.width = showDialog ? `${dialogWidth}px` : '0px';\r\n            dialogDom.style.height = showDialog ? '' : '0px';\r\n            setTimeout(() => {\r\n                dialogDom.style.opacity = showDialog ? 1 : 0;\r\n            }, 100);\r\n        }\r\n        else {\r\n            dialogDom.style.opacity = showDialog ? 1 : 0;\r\n            setTimeout(() => {\r\n                dialogDom.style.width = showDialog ? `${dialogWidth}px` : '0px';\r\n                dialogDom.style.height = showDialog ? '' : '0px';\r\n            }, 100);\r\n        }\r\n    }, [showDialog]);\r\n    const clickToggleDialog = (e) => {\r\n        //点击打开dialog\r\n        e.stopPropagation();\r\n        if (type == 'click') {\r\n            setShowDialog(!showDialog);\r\n            onVisableChange && onVisableChange(!showDialog);\r\n        }\r\n    };\r\n    const hoverOpenDialog = lodash.debounce(() => {\r\n        //移入打开dialog\r\n        if (type == 'hover' && showDialog == false) {\r\n            setShowDialog(true);\r\n            onVisableChange && onVisableChange(true);\r\n        }\r\n    }, 200);\r\n    const hoverCloseDialog = lodash.debounce(() => {\r\n        //移开关闭dialog\r\n        if (type == 'hover' && showDialog == true) {\r\n            setShowDialog(false);\r\n            onVisableChange && onVisableChange(false);\r\n        }\r\n    }, 200);\r\n    const dialogStyle = useMemo(() => {\r\n        let alignStyle = {};\r\n        if (align == 'bottom') {\r\n        }\r\n        else if (align == 'top') {\r\n            alignStyle.bottom = showBtnSize.height + 'px';\r\n        }\r\n        else if (align == 'right') {\r\n            alignStyle.left = showBtnSize.width + 'px';\r\n            alignStyle.bottom = Number(showBtnSize.height) / 2 + 'px';\r\n        }\r\n        else if (align == 'left') {\r\n            alignStyle.right = showBtnSize.width + 'px';\r\n            alignStyle.bottom = Number(showBtnSize.height) / 2 + 'px';\r\n        }\r\n        if (!noBorder) {\r\n            alignStyle.border = '1px solid #ccc';\r\n        }\r\n        return Object.assign({}, alignStyle);\r\n    }, [content, showDialog, propsVisiable, showBtnSize]);\r\n    return (React.createElement(\"div\", { className: \"popover-card\" },\r\n        React.createElement(\"div\", { className: \"open-container\", onMouseEnter: () => hoverOpenDialog(), onMouseLeave: () => hoverCloseDialog() },\r\n            React.createElement(\"div\", { className: \"show-btn\", onClick: (e) => clickToggleDialog(e), ref: showBtnRef }, children),\r\n            React.createElement(\"div\", { className: \"pop-dialog\", style: dialogStyle, onClick: (e) => e.stopPropagation(), onMouseEnter: () => hoverOpenDialog(), onMouseLeave: () => hoverCloseDialog(), ref: dialogRef }, content))));\r\n};\r\nexport default memo(Popover);\r\n","references":["/Users/sjq/Desktop/study/concis/Concis/node_modules/@types/react/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/node_modules/lodash/lodash.js"]}
