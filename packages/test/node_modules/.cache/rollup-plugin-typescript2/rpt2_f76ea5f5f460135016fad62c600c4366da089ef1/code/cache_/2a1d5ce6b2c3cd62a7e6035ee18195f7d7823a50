{"code":"import React, { useState, useEffect, useMemo, useRef } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Button from '../Button';\r\nimport './index.module.less';\r\nimport { ExclamationCircleFilled, CheckCircleFilled, CloseCircleFilled, LoadingOutlined, CloseOutlined, } from '@ant-design/icons';\r\nlet container;\r\nlet topLeftMessageNum = 0;\r\nlet topRightMessageNum = 0;\r\nlet bottomLeftMessageNum = 0;\r\nlet bottomRightMessageNum = 0;\r\n//添加消息窗口\r\nfunction addInstance(type, props) {\r\n    let style = {}, duration = 3000, title = '', content = '', position = 'topRight', clearable = false, showFooter = false, footerBtnVal = {\r\n        enter: 'OK',\r\n        exit: 'Cancel',\r\n    }, doneCallback;\r\n    if (typeof props === 'object') {\r\n        title = props.title;\r\n        style = props.style || {};\r\n        duration = props.duration || 3000;\r\n        content = props.content;\r\n        doneCallback = props.doneCallback;\r\n        if (!props.position) {\r\n            position = 'topRight';\r\n        }\r\n        else {\r\n            position = props.position;\r\n        }\r\n        clearable = props.clearable ? props.clearable : false;\r\n        showFooter = props.showFooter ? props.showFooter : false;\r\n        if (props.footerBtnVal) {\r\n            footerBtnVal = props.footerBtnVal;\r\n        }\r\n    }\r\n    else if (typeof props === 'string') {\r\n        content = props;\r\n    }\r\n    const div = document.createElement('div');\r\n    const messageBoxId = String(Math.floor(Math.random() * 1000));\r\n    div.setAttribute('class', `${position}-${messageBoxId}`);\r\n    if (container) {\r\n        container.appendChild(div);\r\n    }\r\n    else {\r\n        container = document.createElement('div');\r\n        container.setAttribute('class', 'notification-container');\r\n        document.body.appendChild(container);\r\n        container.appendChild(div);\r\n    }\r\n    setTimeout(() => {\r\n        if (Array.prototype.slice.call(container === null || container === void 0 ? void 0 : container.childNodes).includes(div)) {\r\n            changeHeight(Array.prototype.slice.call(container === null || container === void 0 ? void 0 : container.childNodes), position);\r\n            container === null || container === void 0 ? void 0 : container.removeChild(div);\r\n            if (position === 'topLeft') {\r\n                topLeftMessageNum--;\r\n            }\r\n            else if (position === 'topRight') {\r\n                topRightMessageNum--;\r\n            }\r\n            else if (position === 'bottomLeft') {\r\n                bottomLeftMessageNum--;\r\n            }\r\n            else if (position === 'bottomRight') {\r\n                bottomRightMessageNum--;\r\n            }\r\n        }\r\n    }, duration + 200);\r\n    //挂载组件\r\n    ReactDOM.render(React.createElement(Notification, { title: title, style: style, content: content, type: type, duration: duration, position: position, clearable: clearable, showFooter: showFooter, footerBtnVal: footerBtnVal, doneCallback: doneCallback, messageBoxId: messageBoxId }), div);\r\n}\r\n//移除窗口\r\nfunction remove(id, position, callback) {\r\n    const container = document.querySelector('.notification-container');\r\n    const children = Array.prototype.slice.call(container === null || container === void 0 ? void 0 : container.childNodes);\r\n    for (let key in children) {\r\n        if (children[key].getAttribute('class') === `${position}-${id}`) {\r\n            const removeDom = children[key];\r\n            console.log(removeDom.childNodes);\r\n            removeDom.childNodes[0].style.opacity = 0;\r\n            setTimeout(() => {\r\n                container === null || container === void 0 ? void 0 : container.removeChild(removeDom);\r\n            }, 50);\r\n            if (position === 'topLeft') {\r\n                topLeftMessageNum--;\r\n            }\r\n            else if (position === 'topRight') {\r\n                topRightMessageNum--;\r\n            }\r\n            else if (position === 'bottomLeft') {\r\n                bottomLeftMessageNum--;\r\n            }\r\n            else if (position === 'bottomRight') {\r\n                bottomRightMessageNum--;\r\n            }\r\n            changeHeight(children.slice(Number(key)), position);\r\n            callback();\r\n        }\r\n    }\r\n}\r\n//重排节点下窗口高度\r\nfunction changeHeight(children, position) {\r\n    var _a, _b;\r\n    const transform = position.startsWith('top') ? 'top' : 'bottom';\r\n    for (let key in children) {\r\n        const child = children[key].childNodes[0];\r\n        if ((_a = children[key].getAttribute('class')) === null || _a === void 0 ? void 0 : _a.startsWith(transform)) {\r\n            const domHeight = (_b = document.querySelector('.notifica-container')) === null || _b === void 0 ? void 0 : _b.clientHeight;\r\n            child.style[transform] =\r\n                Number(child.style[transform].split('p')[0]) - 30 - domHeight + 'px';\r\n        }\r\n    }\r\n}\r\nconst Notification = (props) => {\r\n    const { style, title, content, type, duration, position, clearable, showFooter, footerBtnVal, doneCallback, messageBoxId, } = props;\r\n    const [opac, setOpac] = useState(1);\r\n    const messageDom = useRef(null);\r\n    useEffect(() => {\r\n        if (position === 'topLeft') {\r\n            topLeftMessageNum++;\r\n        }\r\n        else if (position === 'topRight') {\r\n            topRightMessageNum++;\r\n        }\r\n        else if (position === 'bottomLeft') {\r\n            bottomLeftMessageNum++;\r\n        }\r\n        else if (position === 'bottomRight') {\r\n            bottomRightMessageNum++;\r\n        }\r\n        setTimeout(() => {\r\n            messageDom.current.style.transition = '0.2s linear';\r\n            messageDom.current.style.animation = 'none';\r\n        }, 500);\r\n        setTimeout(() => {\r\n            setOpac(0);\r\n        }, duration);\r\n    }, []);\r\n    useEffect(() => {\r\n        let transform;\r\n        if (position === null || position === void 0 ? void 0 : position.startsWith('top')) {\r\n            transform = 'top';\r\n        }\r\n        else {\r\n            transform = 'bottom';\r\n        }\r\n        let defaultHeight = 0;\r\n        let avaHeight;\r\n        if (position === 'topLeft' && topLeftMessageNum >= 1) {\r\n            defaultHeight = messageDom.current.clientHeight * (topLeftMessageNum - 1);\r\n            avaHeight = topLeftMessageNum;\r\n        }\r\n        else if (position === 'topRight' && topRightMessageNum >= 1) {\r\n            defaultHeight = messageDom.current.clientHeight * (topRightMessageNum - 1);\r\n            avaHeight = topRightMessageNum;\r\n        }\r\n        else if (position === 'bottomLeft' && bottomLeftMessageNum >= 1) {\r\n            defaultHeight = messageDom.current.clientHeight * (bottomLeftMessageNum - 1);\r\n            avaHeight = bottomLeftMessageNum;\r\n        }\r\n        else if (position === 'bottomRight' && bottomRightMessageNum >= 1) {\r\n            defaultHeight = messageDom.current.clientHeight * (bottomRightMessageNum - 1);\r\n            avaHeight = bottomRightMessageNum;\r\n        }\r\n        (messageDom === null || messageDom === void 0 ? void 0 : messageDom.current).style[transform] =\r\n            avaHeight * 30 + defaultHeight + 'px';\r\n    }, [topLeftMessageNum, topRightMessageNum, bottomLeftMessageNum, bottomRightMessageNum]);\r\n    const messageIcon = useMemo(() => {\r\n        if (type === 'info') {\r\n            return React.createElement(ExclamationCircleFilled, { style: { color: '#1890ff', fontSize: '24px' } });\r\n        }\r\n        else if (type === 'error') {\r\n            return React.createElement(CloseCircleFilled, { style: { color: '#f53f3f', fontSize: '24px' } });\r\n        }\r\n        else if (type === 'normal') {\r\n            return React.createElement(React.Fragment, null);\r\n        }\r\n        else if (type === 'success') {\r\n            return React.createElement(CheckCircleFilled, { style: { color: '#19b42a', fontSize: '24px' } });\r\n        }\r\n        else if (type === 'warning') {\r\n            return React.createElement(ExclamationCircleFilled, { style: { color: '#fa7d00', fontSize: '24px' } });\r\n        }\r\n        else if (type === 'loading') {\r\n            return React.createElement(LoadingOutlined, { style: { color: '#1890ff', fontSize: '24px' } });\r\n        }\r\n    }, [type]);\r\n    const messageXtransform = useMemo(() => {\r\n        //提示框水平位置，居左/居右\r\n        if (position === null || position === void 0 ? void 0 : position.includes('Left')) {\r\n            return {\r\n                left: '20px',\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                right: '20px',\r\n            };\r\n        }\r\n    }, [position]);\r\n    const closeMessage = () => {\r\n        //close按钮关闭\r\n        remove(messageBoxId, position, () => {\r\n            doneCallback && doneCallback(1);\r\n        });\r\n    };\r\n    const enter = () => {\r\n        //确认关闭\r\n        remove(messageBoxId, position, () => {\r\n            doneCallback && doneCallback(2);\r\n        });\r\n    };\r\n    const exit = () => {\r\n        //取消关闭\r\n        remove(messageBoxId, position, () => {\r\n            doneCallback && doneCallback(3);\r\n        });\r\n    };\r\n    return (React.createElement(\"div\", { className: \"notifica-container\", style: Object.assign(Object.assign({ opacity: opac }, messageXtransform), style), ref: messageDom },\r\n        React.createElement(\"div\", { className: \"title\" },\r\n            React.createElement(\"div\", { className: \"title-left\" },\r\n                messageIcon,\r\n                React.createElement(\"span\", { className: \"title-content\" }, title)),\r\n            clearable && React.createElement(CloseOutlined, { className: \"close-icon\", onClick: closeMessage })),\r\n        React.createElement(\"div\", { className: \"notification-content\" }, content),\r\n        showFooter && (React.createElement(\"div\", { className: \"notification-footer\" },\r\n            React.createElement(\"div\", null),\r\n            React.createElement(\"div\", null,\r\n                React.createElement(Button, { type: \"text\", height: 30, handleClick: enter }, footerBtnVal.exit),\r\n                React.createElement(Button, { type: \"primary\", height: 30, style: { marginLeft: '15px' }, handleClick: exit }, footerBtnVal.enter))))));\r\n};\r\nNotification.info = (props) => {\r\n    return addInstance('info', props);\r\n};\r\nNotification.success = (props) => {\r\n    return addInstance('success', props);\r\n};\r\nNotification.error = (props) => {\r\n    return addInstance('error', props);\r\n};\r\nNotification.normal = (props) => {\r\n    return addInstance('normal', props);\r\n};\r\nNotification.warning = (props) => {\r\n    return addInstance('warning', props);\r\n};\r\nNotification.loading = (props) => {\r\n    return addInstance('loading', props);\r\n};\r\nexport default Notification;\r\n","references":["/Users/sjq/Desktop/study/concis/Concis/node_modules/@types/react/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/node_modules/@types/react-dom/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/Notification/interface.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/Button/index.tsx","/Users/sjq/Desktop/study/concis/Concis/node_modules/@ant-design/icons/lib/index.d.ts"]}
