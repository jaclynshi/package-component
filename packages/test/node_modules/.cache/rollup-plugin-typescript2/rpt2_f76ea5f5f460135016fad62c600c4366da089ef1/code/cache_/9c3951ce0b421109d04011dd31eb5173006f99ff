{"code":"import React, { useState, useEffect, useMemo, useRef } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.module.less';\r\nimport { ExclamationCircleFilled, CheckCircleFilled, CloseCircleFilled, LoadingOutlined, CloseOutlined, } from '@ant-design/icons';\r\nlet container;\r\nlet topMessageNum = 0;\r\nlet bottomMessageNum = 0;\r\nfunction addInstance(type, props) {\r\n    let style = {}, duration = 3000, content, position = 'top', clearable = false;\r\n    if (typeof props === 'object') {\r\n        style = props.style || {};\r\n        duration = props.duration || 3000;\r\n        content = props.content;\r\n        position = props.position ? props.position : 'top';\r\n        clearable = props.clearable ? props.clearable : false;\r\n    }\r\n    else if (typeof props === 'string') {\r\n        content = props;\r\n    }\r\n    const div = document.createElement('div');\r\n    const messageBoxId = String(Math.floor(Math.random() * 1000));\r\n    div.setAttribute('class', `${position}-${messageBoxId}`);\r\n    if (container) {\r\n        container.appendChild(div);\r\n    }\r\n    else {\r\n        container = document.createElement('div');\r\n        container.setAttribute('class', 'all-container');\r\n        document.body.appendChild(container);\r\n        container.appendChild(div);\r\n    }\r\n    setTimeout(() => {\r\n        if (Array.prototype.slice.call(container === null || container === void 0 ? void 0 : container.childNodes).includes(div)) {\r\n            changeHeight(Array.prototype.slice.call(container === null || container === void 0 ? void 0 : container.childNodes), position);\r\n            container === null || container === void 0 ? void 0 : container.removeChild(div);\r\n            if (position === 'top') {\r\n                topMessageNum--;\r\n            }\r\n            else {\r\n                bottomMessageNum--;\r\n            }\r\n        }\r\n    }, duration + 200);\r\n    ReactDOM.render(React.createElement(Message, { style: style, content: content, type: type, duration: duration, position: position, clearable: clearable, messageBoxId: messageBoxId }), div);\r\n}\r\nfunction remove(id, position) {\r\n    //重排节点下元素高度\r\n    const container = document.querySelector('.all-container');\r\n    const children = Array.prototype.slice.call(container === null || container === void 0 ? void 0 : container.childNodes);\r\n    for (let key in children) {\r\n        if (children[key].getAttribute('class') === `${position}-${id}`) {\r\n            const removeDom = children[key];\r\n            container === null || container === void 0 ? void 0 : container.removeChild(removeDom);\r\n            if (position === 'top') {\r\n                topMessageNum--;\r\n            }\r\n            else {\r\n                bottomMessageNum--;\r\n            }\r\n            changeHeight(children.slice(Number(key)), position);\r\n        }\r\n    }\r\n}\r\nfunction changeHeight(children, position) {\r\n    var _a;\r\n    for (let key in children) {\r\n        const child = children[key].childNodes[0];\r\n        if ((_a = children[key].getAttribute('class')) === null || _a === void 0 ? void 0 : _a.startsWith(position)) {\r\n            child.style[position] = Number(child.style[position].split('p')[0]) - 70 + 'px';\r\n        }\r\n    }\r\n}\r\nconst Message = (props) => {\r\n    const { style, content, type, duration, position, clearable, messageBoxId } = props;\r\n    const [opac, setOpac] = useState(1);\r\n    const messageDom = useRef(null);\r\n    useEffect(() => {\r\n        if (position === 'top') {\r\n            topMessageNum++;\r\n        }\r\n        else {\r\n            bottomMessageNum++;\r\n        }\r\n        setTimeout(() => {\r\n            messageDom.current.style.transition = '0.2s linear';\r\n            messageDom.current.style.animation = 'none';\r\n        }, 500);\r\n        setTimeout(() => {\r\n            setOpac(0);\r\n        }, duration);\r\n    }, []);\r\n    useEffect(() => {\r\n        const transform = position || 'top';\r\n        (messageDom === null || messageDom === void 0 ? void 0 : messageDom.current).style[transform] =\r\n            (transform === 'top' ? topMessageNum : bottomMessageNum) * 70 + 'px';\r\n    }, [topMessageNum, bottomMessageNum]);\r\n    const messageIcon = useMemo(() => {\r\n        if (type === 'info') {\r\n            return React.createElement(ExclamationCircleFilled, { style: { color: '#1890ff', fontSize: '16px' } });\r\n        }\r\n        else if (type === 'error') {\r\n            return React.createElement(CloseCircleFilled, { style: { color: '#f53f3f', fontSize: '16px' } });\r\n        }\r\n        else if (type === 'normal') {\r\n            return React.createElement(React.Fragment, null);\r\n        }\r\n        else if (type === 'success') {\r\n            return React.createElement(CheckCircleFilled, { style: { color: '#19b42a', fontSize: '16px' } });\r\n        }\r\n        else if (type === 'warning') {\r\n            return React.createElement(ExclamationCircleFilled, { style: { color: '#fa7d00', fontSize: '16px' } });\r\n        }\r\n        else if (type === 'loading') {\r\n            return React.createElement(LoadingOutlined, { style: { color: '#1890ff', fontSize: '16px' } });\r\n        }\r\n    }, [type]);\r\n    const closeMessage = () => {\r\n        remove(messageBoxId, position);\r\n    };\r\n    return (React.createElement(\"div\", { className: \"message-container\", style: Object.assign({ opacity: opac }, style), ref: messageDom },\r\n        messageIcon,\r\n        React.createElement(\"span\", { className: \"toast-content\" }, content),\r\n        clearable && React.createElement(CloseOutlined, { onClick: closeMessage })));\r\n};\r\nMessage.info = (props) => {\r\n    return addInstance('info', props);\r\n};\r\nMessage.success = (props) => {\r\n    return addInstance('success', props);\r\n};\r\nMessage.error = (props) => {\r\n    return addInstance('error', props);\r\n};\r\nMessage.normal = (props) => {\r\n    return addInstance('normal', props);\r\n};\r\nMessage.warning = (props) => {\r\n    return addInstance('warning', props);\r\n};\r\nMessage.loading = (props) => {\r\n    return addInstance('loading', props);\r\n};\r\nexport default Message;\r\n","references":["/Users/sjq/Desktop/study/concis/Concis/node_modules/@types/react/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/node_modules/@types/react-dom/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/Message/interface.ts","/Users/sjq/Desktop/study/concis/Concis/node_modules/@ant-design/icons/lib/index.d.ts"]}
