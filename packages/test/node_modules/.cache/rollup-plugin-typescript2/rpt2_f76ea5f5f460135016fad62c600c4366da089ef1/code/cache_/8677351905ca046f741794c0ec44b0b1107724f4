{"code":"import React, { useState, useEffect, memo, useCallback, useMemo, useContext } from 'react';\r\nimport { globalCtx } from '../GlobalConfig';\r\nimport { CaretUpOutlined, CaretDownOutlined } from '@ant-design/icons';\r\nimport './index.module.less';\r\nconst Menu = (props) => {\r\n    const [nowActiveMainKey, setNowActiveMainKey] = useState(''); //选中的一级菜单key\r\n    const [nowActiveKey, setNowActiveKey] = useState(''); //选中的子菜单key\r\n    const [parentMenuHeightList, setParentMenuHeightList] = useState({}); //父菜单高度集合\r\n    const { items, width, dark, ableToggle, defaultOpen, handleRouteChange } = props;\r\n    const { globalColor, menuSelectBgColor } = useContext(globalCtx);\r\n    useEffect(() => {\r\n        const initList = initParentMenuHeight(items, {}, '');\r\n        if (defaultOpen) {\r\n            //默认展开\r\n            for (var key in initList) {\r\n                initList[key].height = initList[key].childNum + 1;\r\n                if (initList[key].children.length > 0) {\r\n                    initList[key].children.map((item) => (item.height = (item.childNum + 1) * 50 + 'px'));\r\n                    initList[key].height += initList[key].children.reduce((pre, next) => {\r\n                        return pre.childNum + next.childNum;\r\n                    });\r\n                }\r\n                initList[key].height = initList[key].height * 50 + 'px';\r\n            }\r\n        }\r\n        setParentMenuHeightList(initList);\r\n    }, []);\r\n    useEffect(() => {\r\n        handleRouteChange && handleRouteChange(nowActiveKey);\r\n    }, [nowActiveKey]);\r\n    const initParentMenuHeight = (item, obj, fatherKey) => {\r\n        //初始化父级菜单高度\r\n        item.forEach((m) => {\r\n            var _a;\r\n            if (m.children) {\r\n                if (m.level == 1) {\r\n                    obj[m.key] = {\r\n                        key: m.key,\r\n                        height: '50px',\r\n                        childNum: m.children.length,\r\n                        level: m.level,\r\n                        children: [],\r\n                    };\r\n                }\r\n                else {\r\n                    (_a = obj[fatherKey]) === null || _a === void 0 ? void 0 : _a.children.push({\r\n                        key: m.key,\r\n                        height: '50px',\r\n                        childNum: m.children.length,\r\n                        level: m.level,\r\n                    });\r\n                }\r\n                initParentMenuHeight(m.children, obj, m.level && m.level == 1 ? m.key : '');\r\n            }\r\n        });\r\n        return obj;\r\n    };\r\n    const toggleFirstMenu = (fMenu, e) => {\r\n        //点击父级菜单\r\n        e.stopPropagation();\r\n        const selectKey = fMenu.key;\r\n        const refreshObject = Object.assign({}, parentMenuHeightList);\r\n        refreshObject[selectKey].height =\r\n            refreshObject[selectKey].height == '50px'\r\n                ? (refreshObject[selectKey].childNum + 1) * 50 + 'px'\r\n                : '50px';\r\n        if (ableToggle) {\r\n            //手风琴折叠\r\n            if (refreshObject[selectKey].height !== '50px') {\r\n                for (var key in refreshObject) {\r\n                    if (key !== selectKey) {\r\n                        refreshObject[key].height = '50px';\r\n                        if (refreshObject[key].children) {\r\n                            refreshObject[key].children.map((item) => (item.height = '50px'));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            //普通折叠\r\n            if (refreshObject[selectKey].children.length !== 0) {\r\n                refreshObject[selectKey].children.forEach((c) => {\r\n                    c.height = '50px';\r\n                });\r\n            }\r\n        }\r\n        setParentMenuHeightList(refreshObject);\r\n    };\r\n    const toggleChildMenu = (cMenu, e, fKey) => {\r\n        //点击子级菜单\r\n        if ((cMenu.level == 2 && !cMenu.children) || cMenu.level == 3) {\r\n            setNowActiveMainKey(fKey);\r\n            setNowActiveKey(cMenu.key);\r\n        }\r\n        if (cMenu.level == 2) {\r\n            //二级菜单扩展切换\r\n            const refreshObject = Object.assign({}, parentMenuHeightList);\r\n            for (var key in refreshObject) {\r\n                if (refreshObject[key].children &&\r\n                    refreshObject[key].children.findIndex((item) => item.key == cMenu.key) !== -1) {\r\n                    //找出是哪个一级菜单的children\r\n                    const childIndex = refreshObject[key].children.findIndex((item) => item.key == cMenu.key);\r\n                    refreshObject[key].children[childIndex].height =\r\n                        refreshObject[key].children[childIndex].height == '50px'\r\n                            ? (refreshObject[key].children[childIndex].childNum + 1) * 50 + 'px'\r\n                            : '50px';\r\n                    let parentHeight = (refreshObject[key].childNum - refreshObject[key].children.length) * 50 + 50; //改变子菜单高度后统计父菜单高度\r\n                    parentHeight += refreshObject[key].children.reduce((pre, next) => {\r\n                        return Number(pre.height.split('px')[0]) + Number(next.height.split('px')[0]);\r\n                    });\r\n                    refreshObject[key].height = parentHeight;\r\n                }\r\n            }\r\n            setParentMenuHeightList(refreshObject);\r\n        }\r\n        if (cMenu.level == 3) {\r\n            for (var key in parentMenuHeightList) {\r\n                if (parentMenuHeightList[key].children &&\r\n                    parentMenuHeightList[key].children.findIndex((item) => item.key == fKey) !== -1) {\r\n                    setNowActiveMainKey(parentMenuHeightList[key].key);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const firstMenuHeight = (key) => {\r\n        var _a;\r\n        //第一级菜单高度\r\n        if (parentMenuHeightList[key]) {\r\n            return {\r\n                height: (_a = parentMenuHeightList[key]) === null || _a === void 0 ? void 0 : _a.height,\r\n            };\r\n        }\r\n        return {\r\n            height: '50px',\r\n        };\r\n    };\r\n    const childMenuHeight = useCallback((key) => {\r\n        var _a;\r\n        //第二级菜单高度\r\n        for (var i in parentMenuHeightList) {\r\n            const childIndex = (_a = parentMenuHeightList[i].children) === null || _a === void 0 ? void 0 : _a.findIndex((item) => item.key == key);\r\n            if (childIndex !== -1) {\r\n                return {\r\n                    height: parentMenuHeightList[i].children[childIndex].height,\r\n                };\r\n            }\r\n        }\r\n        return {\r\n            height: '50px',\r\n        };\r\n    }, [parentMenuHeightList]);\r\n    const customWidth = useMemo(() => {\r\n        if (width) {\r\n            if (typeof width == 'string') {\r\n                return {\r\n                    width: width.includes('%') ? width : width + 'px',\r\n                };\r\n            }\r\n            else if (typeof width == 'number') {\r\n                return {\r\n                    width: width + 'px',\r\n                };\r\n            }\r\n        }\r\n        return {\r\n            width: '220px',\r\n        };\r\n    }, [width]);\r\n    const renderChildOptions = (childM) => {\r\n        //传入level为1的children，进行子项递归\r\n        if (childM.children) {\r\n            return childM.children.map((m) => {\r\n                return (React.createElement(\"div\", { key: m.key },\r\n                    React.createElement(\"div\", { className: nowActiveKey == m.key ? 'activeMenuOptions' : 'childMenuOptions', style: Object.assign({}, childMenuHeight(m.key)) },\r\n                        React.createElement(\"div\", { className: m.children &&\r\n                                m.children.findIndex((i) => i.key == nowActiveKey) !== -1\r\n                                ? 'activeFatherTitle'\r\n                                : 'fatherTitle', onClick: (e) => toggleChildMenu(m, e, childM.key) },\r\n                            React.createElement(\"span\", null, m.label),\r\n                            m.children &&\r\n                                (childMenuHeight(m.key).height == '50px' ? (React.createElement(CaretDownOutlined, null)) : (React.createElement(CaretUpOutlined, null)))),\r\n                        React.createElement(\"div\", { className: \"childMenuOptions\", key: m.key }, m.children && renderChildOptions(m)))));\r\n            });\r\n        }\r\n    };\r\n    return (React.createElement(\"div\", { className: dark ? 'darkMenu' : 'menu', style: Object.assign(Object.assign({}, customWidth), { '--global-color': globalColor || '#1890ff', '--global-menu-option-bg': menuSelectBgColor || '#e6f7ff' }) }, items.map((m) => {\r\n        return (React.createElement(\"div\", { key: m.key },\r\n            React.createElement(\"div\", { className: \"menuOptions\", style: firstMenuHeight(m.key) },\r\n                React.createElement(\"div\", { className: nowActiveMainKey == m.key ? 'activeFatherTitle' : 'fatherTitle', onClick: (e) => toggleFirstMenu(m, e) },\r\n                    React.createElement(\"div\", { className: \"left\" },\r\n                        React.createElement(\"i\", null, m.icon),\r\n                        React.createElement(\"span\", null, m.label)),\r\n                    firstMenuHeight(m.key).height == '50px' ? (React.createElement(CaretDownOutlined, null)) : (React.createElement(CaretUpOutlined, null))),\r\n                React.createElement(React.Fragment, null, m.children && renderChildOptions(m)))));\r\n    })));\r\n};\r\nexport default memo(Menu);\r\n","references":["/Users/sjq/Desktop/study/concis/Concis/node_modules/@types/react/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/GlobalConfig/interface.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/GlobalConfig/index.tsx","/Users/sjq/Desktop/study/concis/Concis/node_modules/@ant-design/icons/lib/index.d.ts"]}
