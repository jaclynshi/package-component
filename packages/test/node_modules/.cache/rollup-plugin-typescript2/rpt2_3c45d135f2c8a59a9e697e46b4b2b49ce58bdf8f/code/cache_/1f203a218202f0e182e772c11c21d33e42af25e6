{"code":"import React, { memo, useEffect, useState } from 'react';\r\nimport './index.module.less';\r\nconst Affix = (props) => {\r\n    const { children, affixType, offsetTop, offsetLeft, offsetBottom, offsetRight, style } = props;\r\n    const [affixElOffset, setAffixElOffset] = useState({});\r\n    let io; //观察者\r\n    useEffect(() => {\r\n        const el = document.querySelector('.affix');\r\n        io = new IntersectionObserver((entries) => elementObverse(entries));\r\n        io.observe(el); //数据劫持监听\r\n        if (affixType == 'scroll') {\r\n            window.addEventListener('scroll', screenScroll);\r\n            setAffixElOffset((old) => {\r\n                old.position = 'relative';\r\n                if (offsetTop && !old.bottom) {\r\n                    old.top = 0;\r\n                }\r\n                if (offsetBottom && !old.top) {\r\n                    old.bottom = 0;\r\n                }\r\n                if (offsetLeft && !old.right) {\r\n                    old.left = 0;\r\n                }\r\n                if (offsetRight && !old.left) {\r\n                    old.right = 0;\r\n                }\r\n                return JSON.parse(JSON.stringify(old));\r\n            });\r\n        }\r\n        else {\r\n            setAffixElOffset((old) => {\r\n                old.position = 'fixed';\r\n                if (offsetTop && !old.bottom) {\r\n                    old.top = offsetTop;\r\n                }\r\n                if (offsetBottom && !old.top) {\r\n                    old.bottom = offsetBottom;\r\n                }\r\n                if (offsetLeft && !old.right) {\r\n                    old.left = offsetLeft;\r\n                }\r\n                if (offsetRight && !old.left) {\r\n                    old.right = offsetRight;\r\n                }\r\n                return JSON.parse(JSON.stringify(old));\r\n            });\r\n        }\r\n        return () => {\r\n            io.unobserve(el);\r\n        };\r\n    }, []);\r\n    const screenScroll = () => {\r\n        const el = document.querySelector('.affix');\r\n        if (window.scrollY < 200) {\r\n            //首屏时，无需脱离文档流\r\n            setAffixElOffset((old) => {\r\n                for (const key in old) {\r\n                    if (key == 'position') {\r\n                        old[key] = 'relative';\r\n                    }\r\n                    else if (key == 'right' || key == 'left' || key == 'top' || key == 'bottom') {\r\n                        old[key] = '0';\r\n                    }\r\n                }\r\n                return JSON.parse(JSON.stringify(old));\r\n            });\r\n        }\r\n    };\r\n    const elementObverse = (entries) => {\r\n        //监听函数\r\n        entries.forEach((entry) => {\r\n            if (!entry.isIntersecting) {\r\n                // 元素未被观测\r\n                if (affixElOffset.position == 'relative') {\r\n                    setAffixElOffset((old) => {\r\n                        old.position = 'fixed';\r\n                        if (offsetTop && offsetTop !== old.top) {\r\n                            old.top = `${offsetTop}px`;\r\n                        }\r\n                        if (offsetBottom && offsetBottom !== old.bottom) {\r\n                            old.bottom = `${offsetBottom}px`;\r\n                        }\r\n                        if (offsetLeft && offsetLeft !== old.left) {\r\n                            old.left = `${offsetLeft}px`;\r\n                        }\r\n                        if (offsetRight && offsetRight !== old.right) {\r\n                            old.right = `${offsetRight}px`;\r\n                        }\r\n                        return JSON.parse(JSON.stringify(old));\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    };\r\n    return (React.createElement(\"div\", { className: \"affix\", style: Object.assign(Object.assign({}, affixElOffset), style) }, children));\r\n};\r\nexport default memo(Affix);\r\n","references":["/Users/sjq/Desktop/study/concis/Concis/node_modules/@types/react/index.d.ts"]}
