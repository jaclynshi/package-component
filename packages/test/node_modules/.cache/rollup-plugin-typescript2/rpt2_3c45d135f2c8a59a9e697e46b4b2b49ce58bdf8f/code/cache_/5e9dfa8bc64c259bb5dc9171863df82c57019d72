{"code":"import React, { useContext, useEffect, memo, useMemo, useRef } from 'react';\r\nimport { ctx } from './group';\r\nimport './styles/avatar.module.less';\r\nconst Avatar = (props) => {\r\n    const { children, style = {}, size = 40, shape, autoFixFontSize = true, triggerType = 'button', triggerIcon, triggerClick, } = props;\r\n    const groupProps = useContext(ctx);\r\n    const textRef = useRef(null);\r\n    useEffect(() => {\r\n        autoFixFontSizeHandler();\r\n    }, []);\r\n    const autoFixFontSizeHandler = () => {\r\n        if (autoFixFontSize) {\r\n            //如果用户配置了文本自适应\r\n            if (textRef.current) {\r\n                const textDomWidth = textRef.current.clientWidth;\r\n                const avatarSize = groupProps.size || size || 40;\r\n                if (textDomWidth - avatarSize > 0) {\r\n                    //文本不够，需要自适应\r\n                    textRef.current.style.transform = `scale(${1 - (textDomWidth - avatarSize + 5) / 100})`;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const formatStyle = useMemo(() => {\r\n        //整合所有头像传参样式\r\n        const returnStyle = Object.assign(Object.assign({}, groupProps.groupStyle), style);\r\n        if (Object.keys(groupProps).length > 0) {\r\n            //头像组\r\n            if (groupProps.size) {\r\n                returnStyle.width = `${groupProps.size}px`;\r\n                returnStyle.height = `${groupProps.size}px`;\r\n                returnStyle.fontSize = `${groupProps.size / 3}px`;\r\n            }\r\n        }\r\n        else {\r\n            //单头像\r\n            if (size) {\r\n                returnStyle.width = `${size}px`;\r\n                returnStyle.height = `${size}px`;\r\n                returnStyle.fontSize = `${size / 3}px`;\r\n            }\r\n        }\r\n        if (shape && shape === 'square') {\r\n            returnStyle.borderRadius = '5px';\r\n        }\r\n        return returnStyle;\r\n    }, [style, shape, size, groupProps]);\r\n    const buttonDialogTransform = useMemo(() => {\r\n        return shape == 'square' ? { right: '-2px', bottom: '-2px' } : { right: '2px', bottom: '-2px' };\r\n    }, [triggerType]);\r\n    const handleClick = () => {\r\n        triggerClick && triggerClick();\r\n    };\r\n    return (React.createElement(\"div\", { className: \"avatar\", style: formatStyle },\r\n        children && children.type === 'img' ? (children) : (React.createElement(\"div\", { ref: textRef, className: \"text-ref\" }, children)),\r\n        //按钮式dialog\r\n        triggerType === 'button' && triggerIcon && (React.createElement(\"div\", { className: \"button-dialog\", style: buttonDialogTransform, onClick: handleClick }, triggerIcon)),\r\n        //内嵌式dialog\r\n        triggerType === 'mask' && triggerIcon && (React.createElement(\"div\", { className: \"dialog\" },\r\n            React.createElement(\"div\", { className: \"icon\", onClick: handleClick }, triggerIcon)))));\r\n};\r\nexport default memo(Avatar);\r\n","references":["/Users/sjq/Desktop/study/concis/Concis/node_modules/@types/react/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/Avatar/group.tsx","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/Avatar/interface.ts"]}
