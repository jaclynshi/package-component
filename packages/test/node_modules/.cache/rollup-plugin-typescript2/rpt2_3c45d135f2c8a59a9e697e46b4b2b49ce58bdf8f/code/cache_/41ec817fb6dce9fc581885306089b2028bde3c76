{"code":"import React, { useState, useMemo, useContext, useEffect, memo, useRef } from 'react';\r\nimport { CloseOutlined, EyeOutlined, UpOutlined, DownOutlined } from '@ant-design/icons';\r\nimport { ctx } from '../Form';\r\nimport { globalCtx } from '../GlobalConfig';\r\nimport './index.module.less';\r\nconst Input = (props) => {\r\n    const { width, moreStyle, type, placeholder, showClear, showTogglePwd, min, max, step, handleIptChange, handleKeyDown, handleIptFocus, handleClick, handleIptBlur, handleNumChange, clearCallback, defaultValue, isFather = false, } = props;\r\n    const [iptValue, setIptValue] = useState(defaultValue || '');\r\n    const [pwdIptState, setPwdIptState] = useState(true); //密码框切换状态\r\n    const formCtx = useContext(ctx);\r\n    const { input } = useContext(globalCtx);\r\n    const iptRef = useRef(null);\r\n    useEffect(() => {\r\n        //用于监听Form组件的重置任务\r\n        if (formCtx.reset) {\r\n            setIptValue('');\r\n        }\r\n    }, [formCtx.reset]);\r\n    useEffect(() => {\r\n        if (formCtx.submitStatus && !isFather) {\r\n            formCtx.getChildVal(iptValue);\r\n        }\r\n    }, [formCtx.submitStatus]);\r\n    const changeIpt = (e) => {\r\n        //改变文本框\r\n        if (moreStyle && Object.keys(moreStyle).includes('caretColor')) {\r\n            return;\r\n        }\r\n        setIptValue(e.target.value);\r\n        if (handleIptChange) {\r\n            handleIptChange(e.target.value);\r\n        }\r\n    };\r\n    const blurIpt = (e) => {\r\n        //失去焦点\r\n        if (type === 'num' && Number(iptValue) == NaN) {\r\n            setIptValue('');\r\n        }\r\n        handleIptBlur && handleIptBlur();\r\n    };\r\n    const focusIpt = () => {\r\n        handleIptFocus && handleIptFocus(iptValue);\r\n    };\r\n    const iptHandleClick = () => {\r\n        handleClick && handleClick();\r\n    };\r\n    const addNum = () => {\r\n        //加\r\n        if (type === 'num' && Number(iptValue) == NaN) {\r\n            return setIptValue('');\r\n        }\r\n        const stepNum = step || 1;\r\n        if (step && max && Number(iptValue) + stepNum > max) {\r\n            handleNumChange && handleNumChange(max);\r\n            return setIptValue(max);\r\n        }\r\n        if (step && min && Number(iptValue) + stepNum < min) {\r\n            handleNumChange && handleNumChange(min);\r\n            return setIptValue(min);\r\n        }\r\n        handleNumChange && handleNumChange(Number(iptValue) + stepNum);\r\n        setIptValue(Number(iptValue) + stepNum);\r\n    };\r\n    const lowNum = () => {\r\n        //减\r\n        if (type === 'num' && Number(iptValue) == NaN) {\r\n            return setIptValue('');\r\n        }\r\n        const stepNum = step || 1;\r\n        if (step && min && Number(iptValue) - stepNum < min) {\r\n            handleNumChange && handleNumChange(min);\r\n            return setIptValue(min);\r\n        }\r\n        handleNumChange && handleNumChange(Number(iptValue) - stepNum);\r\n        setIptValue(Number(iptValue) - stepNum);\r\n    };\r\n    const iptType = useMemo(() => {\r\n        if (showTogglePwd && type === 'password') {\r\n            return pwdIptState ? 'password' : 'text';\r\n        }\r\n        return type || 'text';\r\n    }, [type, showTogglePwd, pwdIptState]);\r\n    const exticStyle = useMemo(() => {\r\n        let style = { width: '170px' };\r\n        if (width) {\r\n            style.width = width + 'px';\r\n        }\r\n        return Object.assign(Object.assign({}, style), moreStyle);\r\n    }, [width, moreStyle]);\r\n    return (React.createElement(\"div\", { className: \"box\", style: { width: width ? width + 'px' : '170px', '--global-color': input || '#8fb6d8' } },\r\n        React.createElement(\"input\", { className: \"input\", style: exticStyle, type: iptType, placeholder: placeholder, value: defaultValue || iptValue, onChange: changeIpt, onBlur: blurIpt, onFocus: focusIpt, onKeyUp: (e) => handleKeyDown && handleKeyDown(e), onClick: iptHandleClick, ref: iptRef }),\r\n        //可清除\r\n        (showClear && (React.createElement(CloseOutlined, { style: { position: 'absolute', right: '5px', fontSize: '12px', cursor: 'pointer' }, onClick: () => {\r\n                setIptValue('');\r\n                clearCallback && clearCallback();\r\n            } }))) ||\r\n            //密码框\r\n            (type === 'password' && showTogglePwd && (React.createElement(EyeOutlined, { style: { position: 'absolute', right: '5px', fontSize: '12px', cursor: 'pointer' }, onClick: () => setPwdIptState(!pwdIptState) }))) ||\r\n            //数字框\r\n            (type === 'num' && (React.createElement(\"div\", { className: \"numTags\" },\r\n                React.createElement(UpOutlined, { style: { cursor: 'pointer', fontSize: '10px' }, onClick: addNum }),\r\n                React.createElement(DownOutlined, { style: { cursor: 'pointer', fontSize: '10px' }, onClick: lowNum }))))));\r\n};\r\nexport default memo(Input);\r\n","references":["/Users/sjq/Desktop/study/concis/Concis/node_modules/@types/react/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/node_modules/@ant-design/icons/lib/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/Form/index.tsx","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/GlobalConfig/interface.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/GlobalConfig/index.tsx"]}
