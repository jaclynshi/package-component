{"code":"import React, { memo, Fragment, useState, useEffect, useCallback, useContext } from 'react';\r\nimport { globalCtx } from '../GlobalConfig';\r\nimport { CaretRightOutlined, CaretDownOutlined, CheckOutlined } from '@ant-design/icons';\r\nimport './index.module.less';\r\nconst TreeView = (props) => {\r\n    const { treeData, defaultOpen, avaDrop, checkCallback, dropCallback } = props;\r\n    const [stateTreeData, setStateTreeData] = useState(treeData); //树结构\r\n    const [hoverTreeNode, setHoverTreeNode] = useState(''); //当前覆盖的节点\r\n    const { globalColor } = useContext(globalCtx);\r\n    useEffect(() => {\r\n        resolveTreeData(stateTreeData, 1, null);\r\n    }, []);\r\n    const resolveTreeData = (treeData, nowIndexLevel, prev) => {\r\n        //二次处理treeData\r\n        const newTreeData = [...treeData];\r\n        newTreeData.forEach((treeNode, index) => {\r\n            var _a;\r\n            treeNode.level = nowIndexLevel;\r\n            if (defaultOpen) {\r\n                //默认全展开\r\n                treeNode.height = '30px';\r\n            }\r\n            else {\r\n                treeNode.height = treeNode.level == 1 ? '30px' : '0';\r\n            }\r\n            treeNode.checked = false;\r\n            treeNode.prev = prev;\r\n            if ((_a = treeNode === null || treeNode === void 0 ? void 0 : treeNode.children) === null || _a === void 0 ? void 0 : _a.length) {\r\n                //有子节点\r\n                resolveTreeData(treeNode.children, nowIndexLevel + 1, treeNode);\r\n            }\r\n            else {\r\n                //没有子节点，重置level为当前层级，继续寻找\r\n                nowIndexLevel = treeNode.level;\r\n            }\r\n        });\r\n        setStateTreeData(newTreeData); //更新状态\r\n    };\r\n    const toggleTreeMenu = (clickTreeNode) => {\r\n        var _a;\r\n        //菜单切换或直接选中终极节点\r\n        if ((_a = clickTreeNode === null || clickTreeNode === void 0 ? void 0 : clickTreeNode.children) === null || _a === void 0 ? void 0 : _a.length) {\r\n            //菜单切换的情况\r\n            const oldStateTree = [...stateTreeData];\r\n            const editTreeNode = (treeNode) => {\r\n                //所选节点后代收起处理函数\r\n                treeNode.forEach((child) => {\r\n                    var _a;\r\n                    //找到节点，对子节点进行处理\r\n                    if ((_a = child === null || child === void 0 ? void 0 : child.children) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        child.height = '0';\r\n                        editTreeNode(child.children);\r\n                    }\r\n                    else {\r\n                        child.height = '0';\r\n                    }\r\n                });\r\n            };\r\n            const mapFn = (treeNode) => {\r\n                //深度优先查找节点函数\r\n                treeNode.forEach((t, i) => {\r\n                    var _a, _b;\r\n                    if (t.title == clickTreeNode.title && t.value == clickTreeNode.value) {\r\n                        if ((_a = t === null || t === void 0 ? void 0 : t.children) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            //后代节点处理，如果打开，只需打开下一代即可，如果关闭，需要关闭所有后代\r\n                            if (t.children[0].height == '0') {\r\n                                //打开\r\n                                t.children = t.children.map((child) => {\r\n                                    return Object.assign(Object.assign({}, child), { height: child.height == '0' ? '30px' : '0' });\r\n                                });\r\n                            }\r\n                            else {\r\n                                //关闭\r\n                                editTreeNode(t.children); //对后代节点进行处理\r\n                            }\r\n                        }\r\n                    }\r\n                    else if ((_b = t === null || t === void 0 ? void 0 : t.children) === null || _b === void 0 ? void 0 : _b.length) {\r\n                        mapFn(t.children);\r\n                    }\r\n                });\r\n            };\r\n            mapFn(oldStateTree);\r\n            setStateTreeData(oldStateTree);\r\n        }\r\n        else {\r\n        }\r\n    };\r\n    const checkTreeNode = (clickTreeNode) => {\r\n        //选中节点\r\n        if (clickTreeNode.disabled) {\r\n            return;\r\n        }\r\n        const oldStateTree = [...stateTreeData];\r\n        const editTreeNode = (treeNode, status) => {\r\n            //所选节点后代处理函数\r\n            treeNode.forEach((child) => {\r\n                var _a;\r\n                //找到节点，对子节点进行处理\r\n                if ((_a = child === null || child === void 0 ? void 0 : child.children) === null || _a === void 0 ? void 0 : _a.length) {\r\n                    child.checked = status;\r\n                    editTreeNode(child.children, status);\r\n                }\r\n                else {\r\n                    child.checked = status;\r\n                }\r\n            });\r\n        };\r\n        const mapFn = (treeNode, prevNode) => {\r\n            //当前节点/上一代节点/爷爷节点\r\n            //深度优先查找节点函数\r\n            treeNode.forEach((t, i) => {\r\n                var _a, _b;\r\n                if (t.title == clickTreeNode.title && t.value == clickTreeNode.value) {\r\n                    t.checked = !t.checked;\r\n                    //前代链表节点的处理\r\n                    if (prevNode) {\r\n                        //如果链表有上层节点\r\n                        let nowTreeList = treeNode; //当前层链表所有节点\r\n                        while (prevNode !== null) {\r\n                            //链表到起始点，结束，从后往前查找\r\n                            if (nowTreeList.every((c) => c.checked)) {\r\n                                //当前层全部选中才改变上层链表\r\n                                prevNode.checked = true;\r\n                                nowTreeList.map((c) => (c.prev = prevNode));\r\n                                nowTreeList = prevNode.children;\r\n                                prevNode = prevNode.prev;\r\n                            }\r\n                            else {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    //后代链表节点的处理\r\n                    if ((_a = t === null || t === void 0 ? void 0 : t.children) === null || _a === void 0 ? void 0 : _a.length) {\r\n                        editTreeNode(t.children, t.checked); //对后代节点进行处理\r\n                    }\r\n                }\r\n                else if ((_b = t === null || t === void 0 ? void 0 : t.children) === null || _b === void 0 ? void 0 : _b.length) {\r\n                    //递归继续遍历，直到找到所选节点\r\n                    mapFn(t.children, t);\r\n                }\r\n            });\r\n        };\r\n        mapFn(oldStateTree, null);\r\n        setStateTreeData(oldStateTree);\r\n        checkCallback && checkCallback(oldStateTree);\r\n    };\r\n    const checkBoxRender = useCallback((treeData) => {\r\n        var _a;\r\n        //根据index对指定数据进行查找\r\n        if (treeData.disabled) {\r\n            return React.createElement(\"div\", { className: \"disblaed-checkBox\" });\r\n        }\r\n        if (!((_a = treeData === null || treeData === void 0 ? void 0 : treeData.children) === null || _a === void 0 ? void 0 : _a.length)) {\r\n            //无子节点\r\n            if (treeData.checked) {\r\n                //选中\r\n                return (React.createElement(\"div\", { className: \"checkBox-actived\", onClick: () => checkTreeNode(treeData) },\r\n                    React.createElement(CheckOutlined, null)));\r\n            }\r\n            else {\r\n                //未选中\r\n                return React.createElement(\"div\", { className: \"checkBox-noActived\", onClick: () => checkTreeNode(treeData) });\r\n            }\r\n        }\r\n        else if (treeData.children && treeData.children.length) {\r\n            //有子节点\r\n            let treeList = []; //0 -> 子节点未选中，1->  子节点选中\r\n            const mapFn = (treeNode) => {\r\n                for (let i = 0; i < treeNode.children.length; i++) {\r\n                    const child = treeNode.children[i];\r\n                    treeList.push(child.checked ? 1 : 0);\r\n                    if (child.children && child.children.length) {\r\n                        //还有后代\r\n                        return mapFn(child);\r\n                    }\r\n                    else {\r\n                        //到终点，无子节点\r\n                        if (i == treeNode.children.length - 1) {\r\n                            if (treeList.every((c) => c == 0)) {\r\n                                //全都没选中\r\n                                return (React.createElement(\"div\", { className: \"checkBox-noActived\", onClick: () => checkTreeNode(treeData) }));\r\n                            }\r\n                            else if (treeList.every((c) => c == 1)) {\r\n                                //全都选中\r\n                                return (React.createElement(\"div\", { className: \"checkBox-actived\", onClick: () => checkTreeNode(treeData) },\r\n                                    React.createElement(CheckOutlined, null)));\r\n                            }\r\n                            else {\r\n                                //部分选中\r\n                                return (React.createElement(\"div\", { className: \"checkBox-activedLess\", onClick: () => checkTreeNode(treeData) },\r\n                                    React.createElement(\"div\", { className: \"less-box\" })));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            return mapFn(treeData);\r\n        }\r\n    }, [stateTreeData]);\r\n    const dragStartTree = (e, treeData) => {\r\n        //开始拖拽\r\n        if (!avaDrop)\r\n            return;\r\n        if (stateTreeData.length == 1 && treeData.level == 1) {\r\n            const oldTree = [...stateTreeData];\r\n            const mapTree = (tree) => {\r\n                var _a;\r\n                if (tree.level !== 1) {\r\n                    tree.height = '0';\r\n                }\r\n                if ((_a = tree === null || tree === void 0 ? void 0 : tree.children) === null || _a === void 0 ? void 0 : _a.length) {\r\n                    tree.children.forEach((c) => {\r\n                        var _a;\r\n                        c.height = '0';\r\n                        if ((_a = c === null || c === void 0 ? void 0 : c.children) === null || _a === void 0 ? void 0 : _a.length) {\r\n                            c.children.forEach((child) => {\r\n                                mapTree(child);\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n            mapTree(oldTree[0]);\r\n            setStateTreeData(oldTree);\r\n        }\r\n        else {\r\n            e.nativeEvent.dataTransfer.setData('dargTree', treeData.title);\r\n        }\r\n    };\r\n    const dropOver = (e, treeNode) => {\r\n        //拖拽完成\r\n        if (!avaDrop)\r\n            return;\r\n        e.nativeEvent.preventDefault();\r\n        if (treeNode.title && treeNode.title !== hoverTreeNode) {\r\n            setHoverTreeNode(treeNode.title);\r\n            const oldTree = [...stateTreeData];\r\n            const mapFn = (tree) => {\r\n                var _a;\r\n                (_a = tree === null || tree === void 0 ? void 0 : tree.children) === null || _a === void 0 ? void 0 : _a.forEach((c) => {\r\n                    var _a, _b;\r\n                    if (c.title == treeNode.title) {\r\n                        c.height = '30px';\r\n                        (_a = c === null || c === void 0 ? void 0 : c.children) === null || _a === void 0 ? void 0 : _a.forEach((childNode) => {\r\n                            childNode.height = '30px';\r\n                        });\r\n                    }\r\n                    else if ((_b = c === null || c === void 0 ? void 0 : c.children) === null || _b === void 0 ? void 0 : _b.length) {\r\n                        mapFn(c);\r\n                    }\r\n                });\r\n            };\r\n            oldTree.forEach((c) => {\r\n                mapFn(c);\r\n            });\r\n            setStateTreeData(oldTree);\r\n        }\r\n    };\r\n    const drop = (e, treeNode) => {\r\n        //拖拽完成，进行更新\r\n        if (!avaDrop)\r\n            return;\r\n        e.nativeEvent.preventDefault();\r\n        var dragTreeNode = e.nativeEvent.dataTransfer.getData('dargTree'); //被拖拽的树节点\r\n        if (!dragTreeNode) {\r\n            return;\r\n        }\r\n        const oldStateTree = [...stateTreeData];\r\n        const findDragNode = (treeList) => {\r\n            var _a, _b, _c;\r\n            //寻找拖拽节点在链表中的位置\r\n            if (treeList.title == dragTreeNode && treeNode !== treeList) {\r\n                dragTreeNode = treeList;\r\n                if (treeList.level == 1) {\r\n                    oldStateTree.splice(treeList.group, 1);\r\n                }\r\n                else {\r\n                    (_a = treeList === null || treeList === void 0 ? void 0 : treeList.children) === null || _a === void 0 ? void 0 : _a.splice(0, 1);\r\n                }\r\n                if (((_b = treeList === null || treeList === void 0 ? void 0 : treeList.children) === null || _b === void 0 ? void 0 : _b.length) == 0) {\r\n                    delete treeList.children;\r\n                }\r\n                return;\r\n            }\r\n            if ((_c = treeList === null || treeList === void 0 ? void 0 : treeList.children) === null || _c === void 0 ? void 0 : _c.length) {\r\n                treeList.children.forEach((c, i) => {\r\n                    var _a, _b;\r\n                    if (c.title == dragTreeNode) {\r\n                        dragTreeNode = c;\r\n                        (_a = treeList === null || treeList === void 0 ? void 0 : treeList.children) === null || _a === void 0 ? void 0 : _a.splice(i, 1);\r\n                        if (((_b = treeList === null || treeList === void 0 ? void 0 : treeList.children) === null || _b === void 0 ? void 0 : _b.length) == 0) {\r\n                            delete treeList.children;\r\n                        }\r\n                    }\r\n                    if (c.children) {\r\n                        findDragNode(c);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        oldStateTree.forEach((c) => {\r\n            findDragNode(c);\r\n        });\r\n        const mapFn = (treeList) => {\r\n            var _a;\r\n            //寻找放置节点在链表中的位置\r\n            if (treeList.title == treeNode.title) {\r\n                dragTreeNode.level = treeList.level + 1;\r\n                dragTreeNode.prev = treeList;\r\n                if (treeList.children) {\r\n                    treeList.children.splice(0, 0, dragTreeNode);\r\n                }\r\n                else {\r\n                    treeList.children = [dragTreeNode];\r\n                }\r\n                return;\r\n            }\r\n            else if ((_a = treeList === null || treeList === void 0 ? void 0 : treeList.children) === null || _a === void 0 ? void 0 : _a.length) {\r\n                treeList.children.forEach((child, index) => {\r\n                    var _a, _b;\r\n                    if (child.title == treeNode.title) {\r\n                        dragTreeNode.level = child.level;\r\n                        dragTreeNode.prev = treeList;\r\n                        if (treeList.children) {\r\n                            treeList.children.splice(index + 1, 0, dragTreeNode);\r\n                            if (treeList.children[index + 1].children) {\r\n                                treeList.children[index + 1].children = ((_a = treeList === null || treeList === void 0 ? void 0 : treeList.children[index + 1]) === null || _a === void 0 ? void 0 : _a.children).map((c) => {\r\n                                    return Object.assign(Object.assign({}, c), { level: (treeList === null || treeList === void 0 ? void 0 : treeList.children)[index + 1].level + 1 });\r\n                                });\r\n                            }\r\n                        }\r\n                        else {\r\n                            treeList.children = [dragTreeNode];\r\n                        }\r\n                    }\r\n                    else if ((_b = child === null || child === void 0 ? void 0 : child.children) === null || _b === void 0 ? void 0 : _b.length) {\r\n                        mapFn(child);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        if (typeof dragTreeNode == 'object')\r\n            oldStateTree.forEach((c) => {\r\n                mapFn(c);\r\n            });\r\n        if (dragTreeNode.group == treeNode.group && dragTreeNode.level < treeNode.level) {\r\n            //如果拖拽的层级比落地的层级小，不做更新\r\n            return;\r\n        }\r\n        setStateTreeData(oldStateTree);\r\n        dropCallback && dropCallback(oldStateTree);\r\n    };\r\n    const render = useCallback((data = stateTreeData) => {\r\n        //动态规划render函数\r\n        return data.map((treeNode, index) => {\r\n            var _a, _b;\r\n            return (React.createElement(Fragment, { key: index },\r\n                React.createElement(\"div\", { className: \"treeNode\", style: {\r\n                        marginLeft: `${treeNode.level * 10}px`,\r\n                        height: `${treeNode.height}`,\r\n                    }, draggable: avaDrop, onDragStart: (e) => dragStartTree(e, treeNode), onDrop: (e) => drop(e, treeNode), onDragOver: (e) => dropOver(e, treeNode) },\r\n                    ((_a = treeNode === null || treeNode === void 0 ? void 0 : treeNode.children) === null || _a === void 0 ? void 0 : _a.length) ? (treeNode.children[0].height == '0' ? (React.createElement(CaretDownOutlined, { onClick: () => toggleTreeMenu(treeNode) })) : (React.createElement(CaretRightOutlined, { onClick: () => toggleTreeMenu(treeNode) }))) : (React.createElement(\"div\", { style: { width: '14px', height: '14px' } })) //空间占位符\r\n                ,\r\n                    checkBoxRender(treeNode),\r\n                    React.createElement(\"span\", { className: \"text\", onClick: () => toggleTreeMenu(treeNode), style: treeNode.disabled ? { color: '#00000040' } : { color: '#000000' } }, treeNode.title)),\r\n                ((_b = treeNode === null || treeNode === void 0 ? void 0 : treeNode.children) === null || _b === void 0 ? void 0 : _b.length) && render(treeNode.children)));\r\n        });\r\n    }, [stateTreeData]);\r\n    return (React.createElement(Fragment, null,\r\n        React.createElement(\"div\", { className: \"tree-select-dialog\", style: { '--global-color': globalColor || '#1890ff' } }, render(stateTreeData))));\r\n};\r\nexport default memo(TreeView);\r\n","references":["/Users/sjq/Desktop/study/concis/Concis/node_modules/@types/react/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/GlobalConfig/interface.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/GlobalConfig/index.tsx","/Users/sjq/Desktop/study/concis/Concis/node_modules/@ant-design/icons/lib/index.d.ts"]}
