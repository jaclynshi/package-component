{"code":"import React, { useEffect, memo, useState, useCallback, useRef, useContext } from 'react';\r\nimport { DoubleLeftOutlined, LeftOutlined, DoubleRightOutlined, RightOutlined, SwapRightOutlined, } from '@ant-design/icons';\r\nimport Input from '../../Input';\r\nimport { globalCtx } from '../../GlobalConfig';\r\nimport { ctx } from '../../Form';\r\nimport './index.module.less';\r\nconst RangeDatePicker = (props) => {\r\n    const { showClear, align, handleChange } = props;\r\n    const [startDate, setStartDate] = useState({\r\n        startYear: new Date().getFullYear(),\r\n        startMonth: new Date().getMonth() + 1,\r\n        startDay: new Date().getDate(),\r\n    });\r\n    const [endDate, setEndDate] = useState({\r\n        endYear: new Date().getFullYear(),\r\n        endMonth: new Date().getMonth() + 2,\r\n        endDay: new Date().getDate(),\r\n    });\r\n    const [startTime, setStartTime] = useState('');\r\n    const [endTime, setEndTime] = useState('');\r\n    const [startMonthFirstDay, setStartMonthFirstDay] = useState(0); //本月第一天是周几\r\n    const [endMonthFirstDay, setEndMonthFirstDay] = useState(0); //本月第一天是周几\r\n    const [startDayListArray, setStartDayListArray] = useState([]); //start月的日历\r\n    const [endDayListArray, setEndDayListArray] = useState([]); //end月的日历\r\n    const [showTimeDiaglog, setShowTimeDialog] = useState(false); //日期选择器dialog show\r\n    const [renderShowDialog, setRenderShowDialog] = useState(false);\r\n    const [chooseStatus, setChooseStatus] = useState({\r\n        start: false,\r\n        end: false,\r\n    }); //是否被选择过\r\n    const formCtx = useContext(ctx);\r\n    const { globalColor } = useContext(globalCtx);\r\n    let activeBorderDom = useRef(null);\r\n    useEffect(() => {\r\n        const { startYear, startMonth } = startDate;\r\n        const { endYear, endMonth } = endDate;\r\n        const startFirstDay = new Date(`${startYear}/${startMonth}/1`).getDay();\r\n        const endFirstDay = new Date(`${endYear}/${endMonth}/1`).getDay();\r\n        const startTotalDay = new Date(startYear, startMonth, 0).getDate();\r\n        const endTotalDay = new Date(endYear, endMonth, 0).getDate();\r\n        const startDayList = new Array(startFirstDay).fill('');\r\n        const endDayList = new Array(endFirstDay).fill('');\r\n        for (let i = 1; i < startTotalDay + 1; i++) {\r\n            startDayList.push(i);\r\n        }\r\n        for (let i = 1; i < endTotalDay + 1; i++) {\r\n            endDayList.push(i);\r\n        }\r\n        setStartDayListArray(startDayList);\r\n        setStartMonthFirstDay(startFirstDay);\r\n        setEndDayListArray(endDayList);\r\n        setEndMonthFirstDay(endFirstDay);\r\n    }, [startDate.startYear, startDate.startMonth, endDate.endYear, endDate.endMonth]);\r\n    useEffect(() => {\r\n        window.addEventListener('click', () => {\r\n            setShowTimeDialog(false);\r\n            setTimeout(() => {\r\n                setRenderShowDialog(false);\r\n            }, 300);\r\n        });\r\n    }, []);\r\n    useEffect(() => {\r\n        if (chooseStatus.start && chooseStatus.end) {\r\n            setShowTimeDialog(false);\r\n            setTimeout(() => {\r\n                setRenderShowDialog(false);\r\n            }, 300);\r\n            setChooseStatus((old) => {\r\n                old.start = false;\r\n                old.end = false;\r\n                return Object.assign({}, old);\r\n            });\r\n            handleChange && handleChange(startTime, endTime);\r\n        }\r\n    }, [chooseStatus]);\r\n    useEffect(() => {\r\n        //用于监听Form组件的重置任务\r\n        if (formCtx.reset) {\r\n            setStartDate({\r\n                startYear: new Date().getFullYear(),\r\n                startMonth: new Date().getMonth() + 1,\r\n                startDay: new Date().getDate(),\r\n            });\r\n            setEndDate({\r\n                endYear: new Date().getFullYear(),\r\n                endMonth: new Date().getMonth() + 2,\r\n                endDay: new Date().getDate(),\r\n            });\r\n            setStartTime('');\r\n            setEndTime('');\r\n        }\r\n    }, [formCtx.reset]);\r\n    useEffect(() => {\r\n        if (formCtx.submitStatus) {\r\n            const { startYear, startMonth, startDay } = startDate;\r\n            const { endYear, endMonth, endDay } = endDate;\r\n            formCtx.getChildVal(`${startYear}-${startMonth}-${startDay} ${endYear}-${endMonth}-${endDay}`);\r\n        }\r\n    }, [formCtx.submitStatus]);\r\n    const startIptFocus = () => {\r\n        setShowTimeDialog(true);\r\n        setRenderShowDialog(true);\r\n        activeBorderDom.current.style.left = '0';\r\n    };\r\n    const endIptFocus = () => {\r\n        setShowTimeDialog(true);\r\n        setRenderShowDialog(true);\r\n        activeBorderDom.current.style.left = '190px';\r\n    };\r\n    const preYear = (type) => {\r\n        //切换上一年\r\n        if (type == 'start') {\r\n            const renderDate = Object.assign({}, startDate);\r\n            renderDate.startYear -= 1;\r\n            setStartDate(renderDate);\r\n        }\r\n        else if (type == 'end') {\r\n            if (endDate.endYear > startDate.startYear) {\r\n                const renderDate = Object.assign({}, endDate);\r\n                renderDate.endYear -= 1;\r\n                setEndDate(renderDate);\r\n            }\r\n        }\r\n    };\r\n    const nextYear = (type) => {\r\n        //切换下一年\r\n        if (type == 'start') {\r\n            if (startDate.startYear < endDate.endYear) {\r\n                const renderDate = Object.assign({}, startDate);\r\n                renderDate.startYear += 1;\r\n                setStartDate(renderDate);\r\n            }\r\n        }\r\n        else if (type == 'end') {\r\n            const renderDate = Object.assign({}, endDate);\r\n            renderDate.endYear += 1;\r\n            setEndDate(renderDate);\r\n        }\r\n    };\r\n    const preMonth = (type) => {\r\n        //切换上一个月\r\n        if (type == 'start') {\r\n            const renderDate = Object.assign({}, startDate);\r\n            if (renderDate.startMonth == 1) {\r\n                renderDate.startMonth = 12;\r\n                renderDate.startYear -= 1;\r\n            }\r\n            else {\r\n                renderDate.startMonth -= 1;\r\n            }\r\n            setStartDate(renderDate);\r\n        }\r\n        else if (type == 'end') {\r\n            if (endDate.endYear == startDate.startYear && endDate.endMonth == startDate.startMonth) {\r\n                return;\r\n            }\r\n            else {\r\n                const renderDate = Object.assign({}, endDate);\r\n                if (renderDate.endMonth == 1) {\r\n                    renderDate.endMonth = 12;\r\n                    renderDate.endYear -= 1;\r\n                }\r\n                else {\r\n                    renderDate.endMonth -= 1;\r\n                }\r\n                if (renderDate.endDay < startDate.startDay) {\r\n                    renderDate.endDay = startDate.startDay;\r\n                }\r\n                setEndDate(renderDate);\r\n            }\r\n        }\r\n    };\r\n    const nextMonth = (type) => {\r\n        //切换下一个月\r\n        if (type == 'start') {\r\n            if (endDate.endYear == startDate.startYear && endDate.endMonth == startDate.startMonth) {\r\n                return;\r\n            }\r\n            else {\r\n                const renderDate = Object.assign({}, startDate);\r\n                if (renderDate.startMonth == 12) {\r\n                    renderDate.startMonth = 1;\r\n                    renderDate.startYear += 1;\r\n                }\r\n                else {\r\n                    renderDate.startMonth += 1;\r\n                }\r\n                setStartDate(renderDate);\r\n            }\r\n        }\r\n        else if (type == 'end') {\r\n            const renderDate = Object.assign({}, endDate);\r\n            if (renderDate.endMonth == 12) {\r\n                renderDate.endMonth = 1;\r\n                renderDate.endYear += 1;\r\n            }\r\n            else {\r\n                renderDate.endMonth += 1;\r\n            }\r\n            setEndDate(renderDate);\r\n        }\r\n    };\r\n    const chooseStartDay = (day) => {\r\n        //选择开始日期\r\n        if (day == '')\r\n            return;\r\n        setStartDate((old) => {\r\n            old.startDay = day;\r\n            return Object.assign({}, old);\r\n        });\r\n        setChooseStatus((old) => {\r\n            old.start = true;\r\n            return Object.assign({}, old);\r\n        });\r\n        setStartTime(`${startDate.startYear}-${startDate.startMonth}-${day}`);\r\n        if (startDate.startYear == endDate.endYear && startDate.startMonth == endDate.endMonth) {\r\n            if (day > endDate.endDay) {\r\n                setEndDate((old) => {\r\n                    old.endDay = day;\r\n                    return Object.assign({}, old);\r\n                });\r\n            }\r\n        }\r\n    };\r\n    const chooseEndDay = (day) => {\r\n        //选择结束日期\r\n        if (startDate.startYear == endDate.endYear && startDate.startMonth == endDate.endMonth) {\r\n            if (day < startDate.startDay) {\r\n                return;\r\n            }\r\n        }\r\n        setChooseStatus((old) => {\r\n            old.end = true;\r\n            return Object.assign({}, old);\r\n        });\r\n        setEndDate((old) => {\r\n            old.endDay = day;\r\n            return Object.assign({}, old);\r\n        });\r\n        setEndTime(`${endDate.endYear}-${endDate.endMonth}-${day}`);\r\n    };\r\n    const enterChangeStartTime = (e) => {\r\n        //回车改变\r\n        if (e.keyCode == 13) {\r\n            if (/^([1-2]\\d{3})-(0?[1-9]|1[0-2])-(0?[1-9]|[1-2][0-9]|30|31)$/.test(startTime)) {\r\n                const start = startTime.split('-');\r\n                if (Number(start[0]) <= endDate.endYear &&\r\n                    Number(start[1]) <= endDate.endMonth &&\r\n                    Number(start[2]) <= endDate.endDay) {\r\n                    setStartDate((old) => {\r\n                        old.startYear = Number(start[0]);\r\n                        old.startMonth = Number(start[1]);\r\n                        old.startDay = Number(start[2]);\r\n                        return Object.assign({}, old);\r\n                    });\r\n                    setChooseStatus((old) => {\r\n                        old.start = true;\r\n                        return Object.assign({}, old);\r\n                    });\r\n                }\r\n                else {\r\n                    setStartTime('');\r\n                }\r\n            }\r\n            else {\r\n                setStartTime('');\r\n            }\r\n        }\r\n    };\r\n    const blurStartTime = () => {\r\n        //失去焦点\r\n        if (!/^([1-2]\\d{3})-(0?[1-9]|1[0-2])-(0?[1-9]|[1-2][0-9]|30|31)$/.test(startTime)) {\r\n            setStartTime('');\r\n        }\r\n    };\r\n    const enterChangeEndTime = (e) => {\r\n        //回车改变\r\n        if (e.keyCode == 13) {\r\n            if (/^([1-2]\\d{3})-(0?[1-9]|1[0-2])-(0?[1-9]|[1-2][0-9]|30|31)$/.test(endTime)) {\r\n                const start = endTime.split('-');\r\n                if (Number(start[0]) >= startDate.startYear &&\r\n                    Number(start[1]) >= startDate.startMonth &&\r\n                    Number(start[2]) >= startDate.startDay) {\r\n                    setEndDate((old) => {\r\n                        old.endYear = Number(start[0]);\r\n                        old.endMonth = Number(start[1]);\r\n                        old.endDay = Number(start[2]);\r\n                        return Object.assign({}, old);\r\n                    });\r\n                    setChooseStatus((old) => {\r\n                        old.end = true;\r\n                        return Object.assign({}, old);\r\n                    });\r\n                }\r\n                else {\r\n                    setEndTime('');\r\n                }\r\n            }\r\n            else {\r\n                setEndTime('');\r\n            }\r\n        }\r\n    };\r\n    const blurEndTime = () => {\r\n        //失去焦点\r\n        if (!/^([1-2]\\d{3})-(0?[1-9]|1[0-2])-(0?[1-9]|[1-2][0-9]|30|31)$/.test(endTime)) {\r\n            setEndTime('');\r\n        }\r\n    };\r\n    const clearStartTime = () => {\r\n        //清空开始时间\r\n        setStartTime('');\r\n        setStartDate((old) => {\r\n            const now = new Date();\r\n            old.startDay = now.getDate();\r\n            old.startMonth = now.getMonth() + 1;\r\n            old.startYear = now.getFullYear();\r\n            return Object.assign({}, old);\r\n        });\r\n    };\r\n    const clearEndTime = () => {\r\n        //清空结束时间\r\n        setEndTime('');\r\n        setEndDate((old) => {\r\n            const now = new Date();\r\n            old.endDay = now.getDate();\r\n            old.endMonth = now.getMonth() + 1;\r\n            old.endYear = now.getFullYear();\r\n            return Object.assign({}, old);\r\n        });\r\n    };\r\n    const activeStyles = () => {\r\n        //选中的样式\r\n        return {\r\n            activeDay: {\r\n                color: '#fff',\r\n                background: globalColor || '#1890FF',\r\n                fontWeight: 'bold',\r\n                borderRadius: '5px',\r\n            },\r\n            showDialog: {\r\n                opacity: 1,\r\n            },\r\n        };\r\n    };\r\n    const alignFn = useCallback(() => {\r\n        if (!align) {\r\n            return {\r\n                bottom: {\r\n                    top: '40px',\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            right: {\r\n                left: '360px',\r\n                bottom: '20px',\r\n            },\r\n            left: {\r\n                right: '600px',\r\n                bottom: '20px',\r\n            },\r\n            top: {\r\n                bottom: '40px',\r\n            },\r\n            bottom: {\r\n                top: '40px',\r\n            },\r\n        }[align];\r\n    }, [align]);\r\n    const disabledClass = useCallback((day) => {\r\n        if (day == '') {\r\n            return 'white';\r\n        }\r\n        if (startDate.startYear == endDate.endYear && startDate.startMonth == endDate.endMonth) {\r\n            if (day < startDate.startDay) {\r\n                return 'disabled-day';\r\n            }\r\n            return 'day-box';\r\n        }\r\n        return 'day-box';\r\n    }, [startDate, endDate]);\r\n    return (React.createElement(\"div\", { className: \"range\", onClick: (e) => e.stopPropagation(), style: globalColor ? { '--hover-color': globalColor } : {} },\r\n        React.createElement(\"div\", { className: \"rangePicker\", onClick: (e) => e.stopPropagation() },\r\n            React.createElement(Input, { placeholder: \"\\u8BF7\\u8F93\\u5165\\u5F00\\u59CB\\u65E5\\u671F\", defaultValue: startTime\r\n                    ? startTime\r\n                    : `${startDate.startYear}-${startDate.startMonth}-${startDate.startDay}`, handleIptChange: (v) => setStartTime(v), handleIptFocus: startIptFocus, handleKeyDown: (e) => enterChangeStartTime(e), handleIptBlur: blurStartTime, clearCallback: clearStartTime, showClear: showClear, isFather: true }),\r\n            React.createElement(SwapRightOutlined, { style: { color: '#cccccc', fontSize: '20px' } }),\r\n            React.createElement(Input, { placeholder: \"\\u8BF7\\u8F93\\u5165\\u7ED3\\u675F\\u65E5\\u671F\", defaultValue: endTime ? endTime : `${endDate.endYear}-${endDate.endMonth}-${endDate.endDay}`, handleIptChange: (v) => setEndTime(v), handleIptFocus: endIptFocus, handleKeyDown: (e) => enterChangeEndTime(e), handleIptBlur: blurEndTime, clearCallback: clearEndTime, showClear: showClear, isFather: true }),\r\n            React.createElement(\"div\", { className: \"activeBorder\", ref: activeBorderDom })),\r\n        renderShowDialog && (React.createElement(\"div\", { className: \"date-box\", onClick: (e) => e.stopPropagation(), style: Object.assign(Object.assign({}, (showTimeDiaglog ? activeStyles().showDialog : {})), alignFn()) },\r\n            React.createElement(\"div\", { className: \"left\" },\r\n                React.createElement(\"div\", { className: \"top-bar\" },\r\n                    React.createElement(\"div\", { className: \"icon\" },\r\n                        React.createElement(DoubleLeftOutlined, { style: { cursor: 'pointer' }, onClick: () => preYear('start') }),\r\n                        React.createElement(LeftOutlined, { style: { marginLeft: '10px', cursor: 'pointer' }, onClick: () => preMonth('start') })),\r\n                    React.createElement(\"div\", { className: \"info\" },\r\n                        startDate.startYear,\r\n                        \"\\u5E74 \",\r\n                        startDate.startMonth,\r\n                        \"\\u6708\"),\r\n                    React.createElement(\"div\", null,\r\n                        React.createElement(RightOutlined, { style: { cursor: 'pointer' }, onClick: () => nextMonth('start') }),\r\n                        React.createElement(DoubleRightOutlined, { style: { marginLeft: '10px', cursor: 'pointer' }, onClick: () => nextYear('start') }))),\r\n                React.createElement(\"div\", { className: \"week\" },\r\n                    React.createElement(\"div\", null, \"\\u4E00\"),\r\n                    React.createElement(\"div\", null, \"\\u4E8C\"),\r\n                    React.createElement(\"div\", null, \"\\u4E09\"),\r\n                    React.createElement(\"div\", null, \"\\u56DB\"),\r\n                    React.createElement(\"div\", null, \"\\u4E94\"),\r\n                    React.createElement(\"div\", null, \"\\u516D\"),\r\n                    React.createElement(\"div\", null, \"\\u65E5\")),\r\n                React.createElement(\"div\", { className: \"day-list\" }, startDayListArray.map((i, index) => {\r\n                    return (React.createElement(\"div\", { key: index, className: i == '' ? 'white' : 'box-list', style: i == startDate.startDay ? activeStyles().activeDay : {}, onClick: () => chooseStartDay(Number(i)) }, i));\r\n                }))),\r\n            React.createElement(\"div\", { className: \"right\" },\r\n                React.createElement(\"div\", { className: \"top-bar\" },\r\n                    React.createElement(\"div\", null,\r\n                        React.createElement(DoubleLeftOutlined, { style: { cursor: 'pointer' }, onClick: () => preYear('end') }),\r\n                        React.createElement(LeftOutlined, { style: { marginLeft: '10px', cursor: 'pointer' }, onClick: () => preMonth('end') })),\r\n                    React.createElement(\"div\", { className: \"info\" },\r\n                        endDate.endYear,\r\n                        \"\\u5E74 \",\r\n                        endDate.endMonth,\r\n                        \"\\u6708\"),\r\n                    React.createElement(\"div\", { className: \"icon\" },\r\n                        React.createElement(RightOutlined, { style: { cursor: 'pointer' }, onClick: () => nextMonth('end') }),\r\n                        React.createElement(DoubleRightOutlined, { style: { marginLeft: '10px', cursor: 'pointer' }, onClick: () => nextYear('end') }))),\r\n                React.createElement(\"div\", { className: \"week\" },\r\n                    React.createElement(\"div\", null, \"\\u4E00\"),\r\n                    React.createElement(\"div\", null, \"\\u4E8C\"),\r\n                    React.createElement(\"div\", null, \"\\u4E09\"),\r\n                    React.createElement(\"div\", null, \"\\u56DB\"),\r\n                    React.createElement(\"div\", null, \"\\u4E94\"),\r\n                    React.createElement(\"div\", null, \"\\u516D\"),\r\n                    React.createElement(\"div\", null, \"\\u65E5\")),\r\n                React.createElement(\"div\", { className: \"day-list\" }, endDayListArray.map((i, index) => {\r\n                    return (React.createElement(\"div\", { key: index, className: disabledClass(i), style: i == endDate.endDay ? activeStyles().activeDay : {}, onClick: () => chooseEndDay(Number(i)) }, i));\r\n                })))))));\r\n};\r\nexport default memo(RangeDatePicker);\r\n","references":["/Users/sjq/Desktop/study/concis/Concis/node_modules/@types/react/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/node_modules/@ant-design/icons/lib/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/Input/index.tsx","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/GlobalConfig/interface.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/GlobalConfig/index.tsx","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/Form/index.tsx"]}
