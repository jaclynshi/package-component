{"code":"import { __awaiter } from \"tslib\";\r\nimport React, { createContext, useEffect, useState, useRef, useCallback } from 'react';\r\nimport FormItem from './form-item';\r\nimport './styles/index.module.less';\r\nexport const ctx = createContext({}); //顶层通信装置\r\nconst collectFormFns = {\r\n    formRef: '',\r\n    onSubmit: () => { },\r\n    resetFields: () => { },\r\n    validateFields: () => { },\r\n    useFormContext: () => { },\r\n};\r\nconst Form = (props) => {\r\n    const { children, layout = 'horizontal', style, formField = null, disabled } = props;\r\n    const [fieldList, setFieldList] = useState({});\r\n    const [reset, setReset] = useState(false);\r\n    const [submitStatus, setSubmitStatus] = useState(false);\r\n    const depsValList = useRef([]); //所有受控控件的值\r\n    const [formControlRef, setFormControlRef] = useState(formField);\r\n    const getChildVal = (depVal) => {\r\n        //提交时获取Form.Item中控件的值\r\n        depsValList.current.push(depVal);\r\n    };\r\n    //根组件状态管理，向下传入\r\n    const providerList = {\r\n        formControlRef,\r\n        layout,\r\n        reset,\r\n        submitStatus,\r\n        getChildVal,\r\n    };\r\n    const outputFormData = () => {\r\n        //生成表体内容\r\n        const depsCloneList = depsValList.current;\r\n        const returnField = JSON.parse(JSON.stringify(fieldList));\r\n        for (var key in fieldList) {\r\n            returnField[key].val = depsCloneList[0];\r\n            depsCloneList.shift();\r\n        }\r\n        depsValList.current = [];\r\n        return returnField;\r\n    };\r\n    const onSubmit = (ref) => {\r\n        //表单提交\r\n        return new Promise((resolve) => {\r\n            setSubmitStatus(true);\r\n            setTimeout(() => __awaiter(void 0, void 0, void 0, function* () {\r\n                setSubmitStatus(false);\r\n                const result = outputFormData();\r\n                const ruleResult = validateFields(result, ref);\r\n                if (Object.keys(ruleResult).length > 0) {\r\n                    resolve(Object.assign({ submitResult: false }, { ruleResult }));\r\n                }\r\n                resolve(Object.assign({ submitResult: true }, { result }));\r\n            }));\r\n        });\r\n    };\r\n    const validateFields = (resultField, ref) => {\r\n        //表单校验\r\n        if (resultField === undefined) {\r\n            resultField = outputFormData();\r\n        }\r\n        const resultRules = {};\r\n        for (var key in resultField) {\r\n            const field = fieldList[key];\r\n            const value = resultField[key].val;\r\n            if (field.rules) {\r\n                let isPass = true;\r\n                const rules = fieldList[key].rules;\r\n                rules.forEach((rule) => {\r\n                    var _a;\r\n                    if (rule.required && value == '' && isPass) {\r\n                        isPass = false;\r\n                        changeValidateText(` .form-item .${key}`, rule.message, key, ref);\r\n                    }\r\n                    else if (rule.maxLength && value.length > rule.maxLength && isPass) {\r\n                        isPass = false;\r\n                        changeValidateText(` .form-item .${key}`, rule.message, key, ref);\r\n                    }\r\n                    else if (rule.minLength && value.length < rule.minLength && isPass) {\r\n                        isPass = false;\r\n                        changeValidateText(` .form-item .${key}`, rule.message, key, ref);\r\n                    }\r\n                    else {\r\n                        if (rule.fn && !rule.fn(value)) {\r\n                            isPass = false;\r\n                            changeValidateText(` .form-item .${key}`, rule.message, key, ref);\r\n                        }\r\n                    }\r\n                    if (isPass &&\r\n                        ref.current.querySelector(` .form-item .${key} .show-rule-label`)) {\r\n                        (_a = ref.current\r\n                            .querySelector(` .form-item .${key} .show-rule-label`)) === null || _a === void 0 ? void 0 : _a.setAttribute('class', 'hide-rule-label');\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        function changeValidateText(className, text, field, ref) {\r\n            resultRules[field] = text;\r\n            const hideDom = ref.current.querySelector(`${className} .hide-rule-label`);\r\n            const showDom = ref.current.querySelector(`${className} .show-rule-label`);\r\n            if (hideDom && (hideDom === null || hideDom === void 0 ? void 0 : hideDom.innerText)) {\r\n                hideDom.innerText = text;\r\n            }\r\n            else if (showDom && (showDom === null || showDom === void 0 ? void 0 : showDom.innerText)) {\r\n                showDom.innerText = text;\r\n            }\r\n            hideDom === null || hideDom === void 0 ? void 0 : hideDom.setAttribute('class', 'show-rule-label');\r\n        }\r\n        return resultRules;\r\n    };\r\n    const resetFields = useCallback((ref) => {\r\n        //重置表单\r\n        setFormControlRef(ref);\r\n        setReset(true);\r\n        setTimeout(() => {\r\n            setReset(false);\r\n        });\r\n    }, [formControlRef]);\r\n    const useFormContext = () => {\r\n        //表单提交\r\n        return new Promise((resolve) => {\r\n            setSubmitStatus(true);\r\n            setTimeout(() => __awaiter(void 0, void 0, void 0, function* () {\r\n                setSubmitStatus(false);\r\n                const result = outputFormData();\r\n                resolve(result);\r\n            }));\r\n        });\r\n    };\r\n    useEffect(() => {\r\n        if (formField) {\r\n            const fieldL = {};\r\n            children.forEach((child) => {\r\n                if (child.props.field) {\r\n                    const key = child.props.field;\r\n                    fieldL[key] = {};\r\n                    fieldL[key].rules = child.props.rules || null;\r\n                    fieldL[key].val = '';\r\n                }\r\n            });\r\n            setFieldList(fieldL);\r\n        }\r\n    }, []);\r\n    useEffect(() => {\r\n        if (formField) {\r\n            collectFormFns.onSubmit = onSubmit;\r\n            collectFormFns.resetFields = resetFields;\r\n            collectFormFns.validateFields = validateFields;\r\n            collectFormFns.useFormContext = useFormContext;\r\n            collectFormFns.formRef = formField;\r\n        }\r\n    }, [fieldList, formField]);\r\n    return (React.createElement(ctx.Provider, { value: providerList },\r\n        React.createElement(\"div\", { className: \"form\", style: style, ref: formField || null },\r\n            disabled && React.createElement(\"div\", { className: \"disabled\" }),\r\n            children)));\r\n};\r\nForm.Item = FormItem;\r\nForm.useForm = () => {\r\n    return collectFormFns;\r\n};\r\nexport default Form;\r\n","references":["/Users/sjq/Desktop/study/concis/Concis/node_modules/@types/react/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/Form/form-item.tsx","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/Form/interface.ts"]}
