{"code":"import React, { memo, useState, useEffect, useCallback, useContext } from 'react';\r\nimport RangeDatePicker from './rangeDatePicker';\r\nimport { ctx } from '../Form';\r\nimport { globalCtx } from '../GlobalConfig';\r\nimport { FieldTimeOutlined, CloseOutlined, CheckOutlined, LeftOutlined, RightOutlined, RollbackOutlined, DoubleLeftOutlined, DoubleRightOutlined, } from '@ant-design/icons';\r\nimport './index.module.less';\r\nconst monthList = [\r\n    '一月',\r\n    '二月',\r\n    '三月',\r\n    '四月',\r\n    '五月',\r\n    '六月',\r\n    '七月',\r\n    '八月',\r\n    '九月',\r\n    '十月',\r\n    '十一月',\r\n    '十二月',\r\n];\r\nconst DatePicker = (props) => {\r\n    const { type, showRange, showClear, align, handleChange } = props;\r\n    const [showTimeDialog, setShowTimeDialog] = useState(false); //显示dialog\r\n    const [renderShowDialog, setRenderShowDialog] = useState(false);\r\n    const [nowDate, setNowDate] = useState({\r\n        //选中的日期\r\n        year: new Date().getFullYear(),\r\n        month: new Date().getMonth() + 1,\r\n        day: new Date().getDate(),\r\n    });\r\n    const [thisMonthFirstDay, setThisMonthFirstDay] = useState(0); //本月第一天是周几\r\n    const [dayListArray, setDayListArray] = useState([]); //每月的日历\r\n    const [pickStatus, setPickStatus] = useState(0); //timerpick状态，0表示选择日期，1表示改变月份，2表示改变年份\r\n    const [iptValue, setIptValue] = useState(null); //文本框输入的值\r\n    const [yearList, setYearList] = useState([\r\n        2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026,\r\n    ]);\r\n    const formCtx = useContext(ctx);\r\n    const { globalColor } = useContext(globalCtx);\r\n    useEffect(() => {\r\n        window.addEventListener('click', () => {\r\n            setShowTimeDialog(false);\r\n            setTimeout(() => {\r\n                setRenderShowDialog(false);\r\n            }, 300);\r\n        });\r\n    }, []);\r\n    useEffect(() => {\r\n        const { year, month } = nowDate;\r\n        const firstDay = new Date(`${year}/${month}/1`).getDay();\r\n        const totalDay = new Date(year, month, 0).getDate();\r\n        const dayList = new Array(firstDay).fill('');\r\n        for (let i = 1; i < totalDay + 1; i++) {\r\n            dayList.push(i);\r\n        }\r\n        setThisMonthFirstDay(firstDay); //重新计算本月第一天为周几\r\n        setDayListArray(dayList); //重排本月日历\r\n    }, [nowDate.year, nowDate.month]);\r\n    useEffect(() => {\r\n        //用于监听Form组件的重置任务\r\n        if (formCtx.reset) {\r\n            setNowDate({\r\n                year: new Date().getFullYear(),\r\n                month: new Date().getMonth() + 1,\r\n                day: new Date().getDate(),\r\n            });\r\n        }\r\n    }, [formCtx.reset]);\r\n    useEffect(() => {\r\n        if (formCtx.submitStatus && !showRange) {\r\n            const { year, month, day } = nowDate;\r\n            formCtx.getChildVal(`${year}-${month}-${day}`);\r\n        }\r\n    }, [formCtx.submitStatus]);\r\n    const openDialog = (e) => {\r\n        e.stopPropagation();\r\n        setShowTimeDialog(true);\r\n        setRenderShowDialog(true);\r\n    };\r\n    const changeDay = (day) => {\r\n        //改变日期\r\n        if (!day)\r\n            return;\r\n        setNowDate((old) => {\r\n            old.day = day;\r\n            return Object.assign({}, old);\r\n        });\r\n        handleChange && handleChange(`${nowDate.year}-${nowDate.month}-${nowDate.day}`);\r\n        setShowTimeDialog(false);\r\n        setTimeout(() => {\r\n            setRenderShowDialog(false);\r\n        }, 300);\r\n    };\r\n    const setToToday = () => {\r\n        //改变到今天\r\n        const today = new Date();\r\n        setNowDate((old) => {\r\n            old.year = today.getFullYear();\r\n            old.month = today.getMonth() + 1;\r\n            old.day = today.getDate();\r\n            return Object.assign({}, old);\r\n        });\r\n    };\r\n    const changeToNextMonth = () => {\r\n        //改变到下个月\r\n        const renderDate = Object.assign({}, nowDate);\r\n        if (renderDate.month == 12) {\r\n            //12月新年\r\n            renderDate.year += 1;\r\n            renderDate.month = 1;\r\n        }\r\n        else {\r\n            //普通递增\r\n            renderDate.month += 1;\r\n        }\r\n        setNowDate(renderDate);\r\n    };\r\n    const changeToPreMonth = () => {\r\n        const renderDate = Object.assign({}, nowDate);\r\n        if (renderDate.month == 1) {\r\n            //12月新年\r\n            renderDate.year -= 1;\r\n            renderDate.month = 12;\r\n        }\r\n        else {\r\n            //普通递增\r\n            renderDate.month -= 1;\r\n        }\r\n        setNowDate(renderDate);\r\n    };\r\n    const changeMonth = (month) => {\r\n        //改变月份\r\n        setNowDate((old) => {\r\n            old.month = month;\r\n            return Object.assign({}, old);\r\n        });\r\n        setPickStatus(0);\r\n    };\r\n    const changeYear = (year) => {\r\n        //改变年份\r\n        setNowDate((old) => {\r\n            old.year = year;\r\n            return Object.assign({}, old);\r\n        });\r\n        setPickStatus(0);\r\n    };\r\n    const bindIptText = (e) => {\r\n        //绑定文本框\r\n        setIptValue(e.target.value);\r\n    };\r\n    const enterChangeDate = (e) => {\r\n        //回车确认更改\r\n        if (e.keyCode == 13) {\r\n            //回车\r\n            if (iptValue !== null) {\r\n                if (/^([1-2]\\d{3})-(0?[1-9]|1[0-2])-(0?[1-9]|[1-2][0-9]|30|31)$/.test(iptValue)) {\r\n                    const inputValue = iptValue.split('-');\r\n                    setNowDate((old) => {\r\n                        old.year = Number(inputValue[0]);\r\n                        old.month = Number(inputValue[1]);\r\n                        old.day = Number(inputValue[2]);\r\n                        return Object.assign({}, old);\r\n                    });\r\n                    handleChange &&\r\n                        handleChange(`${Number(inputValue[0])}-${Number(inputValue[1])}-${Number(inputValue[2])}`);\r\n                }\r\n            }\r\n            setIptValue(null);\r\n            setShowTimeDialog(false);\r\n            setTimeout(() => {\r\n                setRenderShowDialog(false);\r\n            }, 300);\r\n        }\r\n    };\r\n    const blurInput = () => {\r\n        //文本框失去焦点\r\n        if (iptValue !== null) {\r\n            if (/^([1-2]\\d{3})-(0?[1-9]|1[0-2])-(0?[1-9]|[1-2][0-9]|30|31)$/.test(iptValue)) {\r\n                const inputValue = iptValue.split('-');\r\n                setNowDate((old) => {\r\n                    old.year = Number(inputValue[0]);\r\n                    old.month = Number(inputValue[1]);\r\n                    old.day = Number(inputValue[2]);\r\n                    return Object.assign({}, old);\r\n                });\r\n            }\r\n        }\r\n        setIptValue(null);\r\n    };\r\n    const setNextGroupYear = () => {\r\n        //设定下一组年份\r\n        setYearList((old) => {\r\n            return [...old.map((y) => y + 9)];\r\n        });\r\n    };\r\n    const setPreGroupYear = () => {\r\n        setYearList((old) => {\r\n            return [...old.map((y) => y - 9)];\r\n        });\r\n    };\r\n    const clearDate = () => {\r\n        //清空\r\n        setNowDate((old) => {\r\n            (old.year = new Date().getFullYear()),\r\n                (old.month = new Date().getMonth() + 1),\r\n                (old.day = new Date().getDate());\r\n            return Object.assign({}, old);\r\n        });\r\n        setIptValue(null);\r\n    };\r\n    const rangeDatePickChangeCallback = (start, end) => {\r\n        handleChange && handleChange(start, end);\r\n    };\r\n    const activeStyle = {\r\n        //选中的所有样式\r\n        result: {\r\n            letterSpacing: 'normal',\r\n            color: globalColor || '#1890FF',\r\n            width: '120px',\r\n        },\r\n        icon: {\r\n            opacity: 1,\r\n            marginLeft: '5px',\r\n        },\r\n        checkBox: {\r\n            opacity: 1,\r\n        },\r\n        dayActive: {\r\n            backgroundColor: globalColor || '#1890FF',\r\n            color: '#fff',\r\n            fontWeight: 'bold',\r\n            borderRadius: '5px',\r\n        },\r\n    };\r\n    const alignFn = useCallback(() => {\r\n        //对齐方式\r\n        if (!align) {\r\n            return {\r\n                bottom: {\r\n                    top: '40px',\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            right: {\r\n                left: '170px',\r\n                bottom: '20px',\r\n            },\r\n            left: {\r\n                right: '800px',\r\n                bottom: '40px',\r\n            },\r\n            top: {\r\n                bottom: '40px',\r\n            },\r\n            bottom: {\r\n                top: '40px',\r\n            },\r\n        }[align];\r\n    }, [align]);\r\n    return showRange ? (React.createElement(RangeDatePicker, { showClear: showClear, align: align ? align : 'bottom', handleChange: rangeDatePickChangeCallback })) : (React.createElement(\"div\", { className: \"time-picker\" },\r\n        (type == 'primary' || !type) && (React.createElement(\"div\", { className: \"result\", style: showTimeDialog\r\n                ? Object.assign({}, activeStyle.result) : { '--hover-color': globalColor || '#1890ff' }, onClick: (e) => openDialog(e) },\r\n            React.createElement(\"span\", null,\r\n                nowDate.year,\r\n                \"-\",\r\n                nowDate.month,\r\n                \"-\",\r\n                nowDate.day),\r\n            React.createElement(\"div\", { className: \"icon\", style: showTimeDialog ? activeStyle.icon : {} },\r\n                React.createElement(FieldTimeOutlined, null)))),\r\n        type == 'input' && (React.createElement(\"div\", null,\r\n            React.createElement(\"input\", { className: \"input\", value: iptValue !== null ? iptValue : `${nowDate.year}-${nowDate.month}-${nowDate.day}`, onClick: (e) => openDialog(e), onChange: (e) => bindIptText(e), onKeyDown: (e) => enterChangeDate(e), onBlur: blurInput }),\r\n            showClear && (React.createElement(CloseOutlined, { style: { position: 'relative', right: '15px', fontSize: '12px', cursor: 'pointer' }, onClick: clearDate })))),\r\n        renderShowDialog && (React.createElement(\"div\", { className: \"check-box\", style: Object.assign(Object.assign({}, (showTimeDialog\r\n                ? Object.assign(Object.assign({}, activeStyle.checkBox), { '--hover-color': globalColor || '#1890ff' }) : { '--hover-color': globalColor || '#1890ff' })), alignFn()), onClick: (e) => e.stopPropagation() },\r\n            React.createElement(\"div\", { className: \"top-bar\" },\r\n                React.createElement(\"b\", { className: \"year\", onClick: () => setPickStatus(2) }, nowDate.year),\r\n                React.createElement(\"b\", { className: \"month\", onClick: () => setPickStatus(1), style: { marginRight: '20px' } }, nowDate.month),\r\n                React.createElement(\"div\", { className: \"close-icon\", onClick: () => {\r\n                        setShowTimeDialog(false);\r\n                        setTimeout(() => {\r\n                            setRenderShowDialog(false);\r\n                        }, 300);\r\n                    } },\r\n                    React.createElement(CloseOutlined, null))),\r\n            React.createElement(\"div\", { className: \"date-content\" },\r\n                pickStatus == 0 && (React.createElement(React.Fragment, null,\r\n                    React.createElement(\"div\", { className: \"week\" },\r\n                        React.createElement(\"div\", null, \"\\u65E5\"),\r\n                        React.createElement(\"div\", null, \"\\u4E00\"),\r\n                        React.createElement(\"div\", null, \"\\u4E8C\"),\r\n                        React.createElement(\"div\", null, \"\\u4E09\"),\r\n                        React.createElement(\"div\", null, \"\\u56DB\"),\r\n                        React.createElement(\"div\", null, \"\\u4E94\"),\r\n                        React.createElement(\"div\", null, \"\\u516D\")),\r\n                    React.createElement(\"div\", { className: \"day-list\" }, dayListArray.map((day, index) => {\r\n                        return (React.createElement(\"div\", { key: index, className: day ? 'day' : 'white', style: nowDate.day == day ? activeStyle.dayActive : {}, onClick: () => changeDay(day) }, day));\r\n                    })))),\r\n                pickStatus == 1 && (React.createElement(\"div\", { className: \"month-toggle-box\" }, monthList.map((m, index) => {\r\n                    return (React.createElement(\"div\", { key: m, className: \"month\", style: index + 1 == nowDate.month ? activeStyle.dayActive : {}, onClick: () => changeMonth(index + 1) }, m));\r\n                }))),\r\n                pickStatus == 2 && (React.createElement(\"div\", { className: \"year-toggle-box\" },\r\n                    React.createElement(\"div\", { className: \"toggle-bar\" },\r\n                        React.createElement(DoubleLeftOutlined, { style: { cursor: 'pointer' }, onClick: setPreGroupYear }),\r\n                        React.createElement(\"span\", null,\r\n                            yearList[0],\r\n                            \"-\",\r\n                            yearList[8]),\r\n                        React.createElement(DoubleRightOutlined, { style: { cursor: 'pointer' }, onClick: setNextGroupYear })),\r\n                    React.createElement(\"div\", { className: \"list\" }, yearList.map((m) => {\r\n                        return (React.createElement(\"div\", { key: m, className: \"year\", style: m == nowDate.year ? activeStyle.dayActive : {}, onClick: () => changeYear(m) }, m));\r\n                    }))))),\r\n            React.createElement(\"div\", { className: \"time-footer\" },\r\n                pickStatus == 0 && (React.createElement(React.Fragment, null,\r\n                    React.createElement(\"div\", { className: \"today\", onClick: setToToday },\r\n                        React.createElement(\"span\", null, \"\\u4ECA\\u5929\"),\r\n                        React.createElement(CheckOutlined, null)),\r\n                    React.createElement(\"div\", { className: \"toggle-month\" },\r\n                        React.createElement(LeftOutlined, { style: { marginRight: '5px' }, onClick: changeToPreMonth }),\r\n                        React.createElement(RightOutlined, { onClick: changeToNextMonth })))),\r\n                (pickStatus == 1 || pickStatus == 2) && (React.createElement(React.Fragment, null,\r\n                    React.createElement(\"div\", null),\r\n                    React.createElement(\"div\", { className: \"go-back-icon\", onClick: () => setPickStatus(0) },\r\n                        React.createElement(RollbackOutlined, null)))))))));\r\n};\r\nexport default memo(DatePicker);\r\n","references":["/Users/sjq/Desktop/study/concis/Concis/node_modules/@types/react/index.d.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/DatePicker/rangeDatePicker/index.tsx","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/Form/index.tsx","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/GlobalConfig/interface.ts","/Users/sjq/Desktop/study/concis/Concis/packages/concis-react/src/GlobalConfig/index.tsx","/Users/sjq/Desktop/study/concis/Concis/node_modules/@ant-design/icons/lib/index.d.ts"]}
